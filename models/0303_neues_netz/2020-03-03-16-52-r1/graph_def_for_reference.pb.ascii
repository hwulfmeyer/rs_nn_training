node {
  name: "input_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 35
        }
        dim {
          size: 35
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "conv2d_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1380131095647812
      }
    }
  }
}
node {
  name: "conv2d_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1380131095647812
      }
    }
  }
}
node {
  name: "conv2d_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9934923
    }
  }
}
node {
  name: "conv2d_1/random_uniform/sub"
  op: "Sub"
  input: "conv2d_1/random_uniform/max"
  input: "conv2d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/random_uniform/mul"
  op: "Mul"
  input: "conv2d_1/random_uniform/RandomUniform"
  input: "conv2d_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/random_uniform"
  op: "Add"
  input: "conv2d_1/random_uniform/mul"
  input: "conv2d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_1/kernel"
    }
  }
}
node {
  name: "conv2d_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_1/kernel"
}
node {
  name: "conv2d_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_1/kernel"
  input: "conv2d_1/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_1/bias"
    }
  }
}
node {
  name: "conv2d_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_1/bias"
}
node {
  name: "conv2d_1/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_1/bias"
  input: "conv2d_1/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/convolution/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/convolution"
  op: "Conv2D"
  input: "input_1"
  input: "conv2d_1/convolution/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_1/convolution"
  input: "conv2d_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_1/Relu"
  op: "Relu"
  input: "conv2d_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/gamma"
    }
  }
}
node {
  name: "batch_normalization_1/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/gamma"
}
node {
  name: "batch_normalization_1/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/beta"
    }
  }
}
node {
  name: "batch_normalization_1/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/beta"
}
node {
  name: "batch_normalization_1/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/Const_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_mean"
}
node {
  name: "batch_normalization_1/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/Const_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_variance"
}
node {
  name: "batch_normalization_1/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/Const_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_1/bias"
}
node {
  name: "batch_normalization_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_mean"
}
node {
  name: "batch_normalization_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_variance"
}
node {
  name: "batch_normalization_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/beta"
}
node {
  name: "batch_normalization_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "conv2d_1/kernel"
}
node {
  name: "batch_normalization_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/gamma"
}
node {
  name: "batch_normalization_1/init"
  op: "NoOp"
  input: "^batch_normalization_1/beta/Assign"
  input: "^batch_normalization_1/gamma/Assign"
  input: "^batch_normalization_1/moving_mean/Assign"
  input: "^batch_normalization_1/moving_variance/Assign"
  input: "^conv2d_1/bias/Assign"
  input: "^conv2d_1/kernel/Assign"
}
node {
  name: "batch_normalization_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "conv2d_1/Relu"
  input: "batch_normalization_1/ReadVariableOp"
  input: "batch_normalization_1/ReadVariableOp_1"
  input: "batch_normalization_1/Const_4"
  input: "batch_normalization_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/Shape"
  op: "Shape"
  input: "conv2d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice"
  op: "StridedSlice"
  input: "batch_normalization_1/Shape"
  input: "batch_normalization_1/strided_slice/stack"
  input: "batch_normalization_1/strided_slice/stack_1"
  input: "batch_normalization_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "batch_normalization_1/Shape_1"
  op: "Shape"
  input: "conv2d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice_1"
  op: "StridedSlice"
  input: "batch_normalization_1/Shape_1"
  input: "batch_normalization_1/strided_slice_1/stack"
  input: "batch_normalization_1/strided_slice_1/stack_1"
  input: "batch_normalization_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "batch_normalization_1/Shape_2"
  op: "Shape"
  input: "conv2d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_1/strided_slice_2"
  op: "StridedSlice"
  input: "batch_normalization_1/Shape_2"
  input: "batch_normalization_1/strided_slice_2/stack"
  input: "batch_normalization_1/strided_slice_2/stack_1"
  input: "batch_normalization_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "batch_normalization_1/Rank/packed"
  op: "Pack"
  input: "batch_normalization_1/strided_slice"
  input: "batch_normalization_1/strided_slice_1"
  input: "batch_normalization_1/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_normalization_1/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_1/range"
  op: "Range"
  input: "batch_normalization_1/range/start"
  input: "batch_normalization_1/Rank"
  input: "batch_normalization_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_1/Prod/input"
  op: "Pack"
  input: "batch_normalization_1/strided_slice"
  input: "batch_normalization_1/strided_slice_1"
  input: "batch_normalization_1/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_normalization_1/Prod"
  op: "Prod"
  input: "batch_normalization_1/Prod/input"
  input: "batch_normalization_1/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/Cast"
  op: "Cast"
  input: "batch_normalization_1/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0010000467300415
      }
    }
  }
}
node {
  name: "batch_normalization_1/sub"
  op: "Sub"
  input: "batch_normalization_1/Cast"
  input: "batch_normalization_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/truediv"
  op: "RealDiv"
  input: "batch_normalization_1/Cast"
  input: "batch_normalization_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/mul"
  op: "Mul"
  input: "batch_normalization_1/FusedBatchNormV3:2"
  input: "batch_normalization_1/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/Const_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_1/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/sub_1"
  op: "Sub"
  input: "batch_normalization_1/ReadVariableOp_2"
  input: "batch_normalization_1/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/mul_1"
  op: "Mul"
  input: "batch_normalization_1/sub_1"
  input: "batch_normalization_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/mul_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "^batch_normalization_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/Const_7"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_1/ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/sub_2"
  op: "Sub"
  input: "batch_normalization_1/ReadVariableOp_4"
  input: "batch_normalization_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/mul_2"
  op: "Mul"
  input: "batch_normalization_1/sub_2"
  input: "batch_normalization_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignSubVariableOp_1"
  op: "AssignSubVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/mul_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/ReadVariableOp_5"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "^batch_normalization_1/AssignSubVariableOp_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/ReadVariableOp_6"
  op: "ReadVariableOp"
  input: "batch_normalization_1/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/ReadVariableOp_7"
  op: "ReadVariableOp"
  input: "batch_normalization_1/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/FusedBatchNormV3_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/FusedBatchNormV3_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/FusedBatchNormV3_1"
  op: "FusedBatchNormV3"
  input: "conv2d_1/Relu"
  input: "batch_normalization_1/ReadVariableOp_6"
  input: "batch_normalization_1/ReadVariableOp_7"
  input: "batch_normalization_1/FusedBatchNormV3_1/ReadVariableOp"
  input: "batch_normalization_1/FusedBatchNormV3_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "max_pooling2d_1/MaxPool"
  op: "MaxPool"
  input: "batch_normalization_1/FusedBatchNormV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "conv2d_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "conv2d_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8376409
    }
  }
}
node {
  name: "conv2d_2/random_uniform/sub"
  op: "Sub"
  input: "conv2d_2/random_uniform/max"
  input: "conv2d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/random_uniform/mul"
  op: "Mul"
  input: "conv2d_2/random_uniform/RandomUniform"
  input: "conv2d_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/random_uniform"
  op: "Add"
  input: "conv2d_2/random_uniform/mul"
  input: "conv2d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_2/kernel"
    }
  }
}
node {
  name: "conv2d_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_2/kernel"
}
node {
  name: "conv2d_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_2/kernel"
  input: "conv2d_2/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_2/bias"
    }
  }
}
node {
  name: "conv2d_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_2/bias"
}
node {
  name: "conv2d_2/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_2/bias"
  input: "conv2d_2/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/convolution/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/convolution"
  op: "Conv2D"
  input: "max_pooling2d_1/MaxPool"
  input: "conv2d_2/convolution/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_2/convolution"
  input: "conv2d_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_2/Relu"
  op: "Relu"
  input: "conv2d_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/gamma"
    }
  }
}
node {
  name: "batch_normalization_2/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/gamma"
}
node {
  name: "batch_normalization_2/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/beta"
    }
  }
}
node {
  name: "batch_normalization_2/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/beta"
}
node {
  name: "batch_normalization_2/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/Const_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_mean"
}
node {
  name: "batch_normalization_2/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/Const_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_variance"
}
node {
  name: "batch_normalization_2/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/Const_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "conv2d_2/Relu"
  input: "batch_normalization_2/ReadVariableOp"
  input: "batch_normalization_2/ReadVariableOp_1"
  input: "batch_normalization_2/Const_4"
  input: "batch_normalization_2/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/Shape"
  op: "Shape"
  input: "conv2d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice"
  op: "StridedSlice"
  input: "batch_normalization_2/Shape"
  input: "batch_normalization_2/strided_slice/stack"
  input: "batch_normalization_2/strided_slice/stack_1"
  input: "batch_normalization_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "batch_normalization_2/Shape_1"
  op: "Shape"
  input: "conv2d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice_1"
  op: "StridedSlice"
  input: "batch_normalization_2/Shape_1"
  input: "batch_normalization_2/strided_slice_1/stack"
  input: "batch_normalization_2/strided_slice_1/stack_1"
  input: "batch_normalization_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "batch_normalization_2/Shape_2"
  op: "Shape"
  input: "conv2d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_2/strided_slice_2"
  op: "StridedSlice"
  input: "batch_normalization_2/Shape_2"
  input: "batch_normalization_2/strided_slice_2/stack"
  input: "batch_normalization_2/strided_slice_2/stack_1"
  input: "batch_normalization_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "batch_normalization_2/Rank/packed"
  op: "Pack"
  input: "batch_normalization_2/strided_slice"
  input: "batch_normalization_2/strided_slice_1"
  input: "batch_normalization_2/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_normalization_2/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_2/range"
  op: "Range"
  input: "batch_normalization_2/range/start"
  input: "batch_normalization_2/Rank"
  input: "batch_normalization_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_2/Prod/input"
  op: "Pack"
  input: "batch_normalization_2/strided_slice"
  input: "batch_normalization_2/strided_slice_1"
  input: "batch_normalization_2/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_normalization_2/Prod"
  op: "Prod"
  input: "batch_normalization_2/Prod/input"
  input: "batch_normalization_2/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/Cast"
  op: "Cast"
  input: "batch_normalization_2/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0010000467300415
      }
    }
  }
}
node {
  name: "batch_normalization_2/sub"
  op: "Sub"
  input: "batch_normalization_2/Cast"
  input: "batch_normalization_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/truediv"
  op: "RealDiv"
  input: "batch_normalization_2/Cast"
  input: "batch_normalization_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/mul"
  op: "Mul"
  input: "batch_normalization_2/FusedBatchNormV3:2"
  input: "batch_normalization_2/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/Const_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_2/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/sub_1"
  op: "Sub"
  input: "batch_normalization_2/ReadVariableOp_2"
  input: "batch_normalization_2/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/mul_1"
  op: "Mul"
  input: "batch_normalization_2/sub_1"
  input: "batch_normalization_2/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/mul_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "^batch_normalization_2/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/Const_7"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_2/ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/sub_2"
  op: "Sub"
  input: "batch_normalization_2/ReadVariableOp_4"
  input: "batch_normalization_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/mul_2"
  op: "Mul"
  input: "batch_normalization_2/sub_2"
  input: "batch_normalization_2/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignSubVariableOp_1"
  op: "AssignSubVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/mul_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/ReadVariableOp_5"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "^batch_normalization_2/AssignSubVariableOp_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/ReadVariableOp_6"
  op: "ReadVariableOp"
  input: "batch_normalization_2/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/ReadVariableOp_7"
  op: "ReadVariableOp"
  input: "batch_normalization_2/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/FusedBatchNormV3_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/FusedBatchNormV3_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/FusedBatchNormV3_1"
  op: "FusedBatchNormV3"
  input: "conv2d_2/Relu"
  input: "batch_normalization_2/ReadVariableOp_6"
  input: "batch_normalization_2/ReadVariableOp_7"
  input: "batch_normalization_2/FusedBatchNormV3_1/ReadVariableOp"
  input: "batch_normalization_2/FusedBatchNormV3_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "max_pooling2d_2/MaxPool"
  op: "MaxPool"
  input: "batch_normalization_2/FusedBatchNormV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0589255653321743
      }
    }
  }
}
node {
  name: "conv2d_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0589255653321743
      }
    }
  }
}
node {
  name: "conv2d_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5371732
    }
  }
}
node {
  name: "conv2d_3/random_uniform/sub"
  op: "Sub"
  input: "conv2d_3/random_uniform/max"
  input: "conv2d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/random_uniform/mul"
  op: "Mul"
  input: "conv2d_3/random_uniform/RandomUniform"
  input: "conv2d_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/random_uniform"
  op: "Add"
  input: "conv2d_3/random_uniform/mul"
  input: "conv2d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_3/kernel"
    }
  }
}
node {
  name: "conv2d_3/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_3/kernel"
}
node {
  name: "conv2d_3/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_3/kernel"
  input: "conv2d_3/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_3/bias"
    }
  }
}
node {
  name: "conv2d_3/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_3/bias"
}
node {
  name: "conv2d_3/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_3/bias"
  input: "conv2d_3/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/convolution/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/convolution"
  op: "Conv2D"
  input: "max_pooling2d_2/MaxPool"
  input: "conv2d_3/convolution/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_3/convolution"
  input: "conv2d_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_3/Relu"
  op: "Relu"
  input: "conv2d_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/gamma"
    }
  }
}
node {
  name: "batch_normalization_3/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/gamma"
}
node {
  name: "batch_normalization_3/gamma/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/beta"
    }
  }
}
node {
  name: "batch_normalization_3/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/beta"
}
node {
  name: "batch_normalization_3/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/Const_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_mean"
}
node {
  name: "batch_normalization_3/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/Const_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_variance"
}
node {
  name: "batch_normalization_3/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/Const_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "conv2d_3/Relu"
  input: "batch_normalization_3/ReadVariableOp"
  input: "batch_normalization_3/ReadVariableOp_1"
  input: "batch_normalization_3/Const_4"
  input: "batch_normalization_3/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/Shape"
  op: "Shape"
  input: "conv2d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice"
  op: "StridedSlice"
  input: "batch_normalization_3/Shape"
  input: "batch_normalization_3/strided_slice/stack"
  input: "batch_normalization_3/strided_slice/stack_1"
  input: "batch_normalization_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "batch_normalization_3/Shape_1"
  op: "Shape"
  input: "conv2d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice_1"
  op: "StridedSlice"
  input: "batch_normalization_3/Shape_1"
  input: "batch_normalization_3/strided_slice_1/stack"
  input: "batch_normalization_3/strided_slice_1/stack_1"
  input: "batch_normalization_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "batch_normalization_3/Shape_2"
  op: "Shape"
  input: "conv2d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_3/strided_slice_2"
  op: "StridedSlice"
  input: "batch_normalization_3/Shape_2"
  input: "batch_normalization_3/strided_slice_2/stack"
  input: "batch_normalization_3/strided_slice_2/stack_1"
  input: "batch_normalization_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "batch_normalization_3/Rank/packed"
  op: "Pack"
  input: "batch_normalization_3/strided_slice"
  input: "batch_normalization_3/strided_slice_1"
  input: "batch_normalization_3/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_normalization_3/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch_normalization_3/range"
  op: "Range"
  input: "batch_normalization_3/range/start"
  input: "batch_normalization_3/Rank"
  input: "batch_normalization_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_3/Prod/input"
  op: "Pack"
  input: "batch_normalization_3/strided_slice"
  input: "batch_normalization_3/strided_slice_1"
  input: "batch_normalization_3/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_normalization_3/Prod"
  op: "Prod"
  input: "batch_normalization_3/Prod/input"
  input: "batch_normalization_3/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/Cast"
  op: "Cast"
  input: "batch_normalization_3/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0010000467300415
      }
    }
  }
}
node {
  name: "batch_normalization_3/sub"
  op: "Sub"
  input: "batch_normalization_3/Cast"
  input: "batch_normalization_3/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/truediv"
  op: "RealDiv"
  input: "batch_normalization_3/Cast"
  input: "batch_normalization_3/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/mul"
  op: "Mul"
  input: "batch_normalization_3/FusedBatchNormV3:2"
  input: "batch_normalization_3/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/Const_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_3/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/sub_1"
  op: "Sub"
  input: "batch_normalization_3/ReadVariableOp_2"
  input: "batch_normalization_3/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/mul_1"
  op: "Mul"
  input: "batch_normalization_3/sub_1"
  input: "batch_normalization_3/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/mul_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "^batch_normalization_3/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/Const_7"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_3/ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/sub_2"
  op: "Sub"
  input: "batch_normalization_3/ReadVariableOp_4"
  input: "batch_normalization_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/mul_2"
  op: "Mul"
  input: "batch_normalization_3/sub_2"
  input: "batch_normalization_3/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignSubVariableOp_1"
  op: "AssignSubVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/mul_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/ReadVariableOp_5"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "^batch_normalization_3/AssignSubVariableOp_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/ReadVariableOp_6"
  op: "ReadVariableOp"
  input: "batch_normalization_3/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/ReadVariableOp_7"
  op: "ReadVariableOp"
  input: "batch_normalization_3/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/FusedBatchNormV3_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/FusedBatchNormV3_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/FusedBatchNormV3_1"
  op: "FusedBatchNormV3"
  input: "conv2d_3/Relu"
  input: "batch_normalization_3/ReadVariableOp_6"
  input: "batch_normalization_3/ReadVariableOp_7"
  input: "batch_normalization_3/FusedBatchNormV3_1/ReadVariableOp"
  input: "batch_normalization_3/FusedBatchNormV3_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "max_pooling2d_3/MaxPool"
  op: "MaxPool"
  input: "batch_normalization_3/FusedBatchNormV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "flatten_1/Shape"
  op: "Shape"
  input: "max_pooling2d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten_1/strided_slice"
  op: "StridedSlice"
  input: "flatten_1/Shape"
  input: "flatten_1/strided_slice/stack"
  input: "flatten_1/strided_slice/stack_1"
  input: "flatten_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten_1/Prod"
  op: "Prod"
  input: "flatten_1/strided_slice"
  input: "flatten_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "flatten_1/stack_727/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flatten_1/stack_727"
  op: "Pack"
  input: "flatten_1/stack_727/0"
  input: "flatten_1/Prod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten_1/Reshape"
  op: "Reshape"
  input: "max_pooling2d_3/MaxPool"
  input: "flatten_1/stack_727"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout1/Identity"
  op: "Identity"
  input: "flatten_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04841229319572449
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04841229319572449
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8240311
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/kernel"
    }
  }
}
node {
  name: "dense_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
}
node {
  name: "dense_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/bias"
    }
  }
}
node {
  name: "dense_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
}
node {
  name: "dense_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout1/Identity"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu"
  op: "Relu"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout2/Identity"
  op: "Identity"
  input: "dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0765465572476387
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0765465572476387
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2380651
    }
  }
}
node {
  name: "dense_2/random_uniform/sub"
  op: "Sub"
  input: "dense_2/random_uniform/max"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/mul"
  op: "Mul"
  input: "dense_2/random_uniform/RandomUniform"
  input: "dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform"
  op: "Add"
  input: "dense_2/random_uniform/mul"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_2/kernel"
    }
  }
}
node {
  name: "dense_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_2/kernel"
}
node {
  name: "dense_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_2/kernel"
  input: "dense_2/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_2/bias"
    }
  }
}
node {
  name: "dense_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_2/bias"
}
node {
  name: "dense_2/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_2/bias"
  input: "dense_2/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dropout2/Identity"
  input: "dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Relu"
  op: "Relu"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\0006\000\000\000"
      }
    }
  }
}
node {
  name: "dense_5/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10295973718166351
      }
    }
  }
}
node {
  name: "dense_5/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10295973718166351
      }
    }
  }
}
node {
  name: "dense_5/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_5/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5454782
    }
  }
}
node {
  name: "dense_5/random_uniform/sub"
  op: "Sub"
  input: "dense_5/random_uniform/max"
  input: "dense_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/random_uniform/mul"
  op: "Mul"
  input: "dense_5/random_uniform/RandomUniform"
  input: "dense_5/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/random_uniform"
  op: "Add"
  input: "dense_5/random_uniform/mul"
  input: "dense_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 54
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_5/kernel"
    }
  }
}
node {
  name: "dense_5/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_5/kernel"
}
node {
  name: "dense_5/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_5/kernel"
  input: "dense_5/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_5/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 54
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_5/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 54
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_5/bias"
    }
  }
}
node {
  name: "dense_5/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_5/bias"
}
node {
  name: "dense_5/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_5/bias"
  input: "dense_5/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_5/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_5/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/MatMul"
  op: "MatMul"
  input: "dense_2/Relu"
  input: "dense_5/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_5/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_5/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_5/BiasAdd"
  op: "BiasAdd"
  input: "dense_5/MatMul"
  input: "dense_5/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_5/Softmax"
  op: "Softmax"
  input: "dense_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10814761370420456
      }
    }
  }
}
node {
  name: "dense_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10814761370420456
      }
    }
  }
}
node {
  name: "dense_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3050817
    }
  }
}
node {
  name: "dense_3/random_uniform/sub"
  op: "Sub"
  input: "dense_3/random_uniform/max"
  input: "dense_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/random_uniform/mul"
  op: "Mul"
  input: "dense_3/random_uniform/RandomUniform"
  input: "dense_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/random_uniform"
  op: "Add"
  input: "dense_3/random_uniform/mul"
  input: "dense_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_3/kernel"
    }
  }
}
node {
  name: "dense_3/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_3/kernel"
}
node {
  name: "dense_3/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_3/kernel"
  input: "dense_3/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_3/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_3/bias"
    }
  }
}
node {
  name: "dense_3/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_3/bias"
}
node {
  name: "dense_3/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_3/bias"
  input: "dense_3/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/MatMul"
  op: "MatMul"
  input: "dense_2/Relu"
  input: "dense_3/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_3/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/BiasAdd"
  op: "BiasAdd"
  input: "dense_3/MatMul"
  input: "dense_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_4/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000h\001\000\000"
      }
    }
  }
}
node {
  name: "dense_4/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08295018970966339
      }
    }
  }
}
node {
  name: "dense_4/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08295018970966339
      }
    }
  }
}
node {
  name: "dense_4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2505852
    }
  }
}
node {
  name: "dense_4/random_uniform/sub"
  op: "Sub"
  input: "dense_4/random_uniform/max"
  input: "dense_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/random_uniform/mul"
  op: "Mul"
  input: "dense_4/random_uniform/RandomUniform"
  input: "dense_4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/random_uniform"
  op: "Add"
  input: "dense_4/random_uniform/mul"
  input: "dense_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 360
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_4/kernel"
    }
  }
}
node {
  name: "dense_4/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_4/kernel"
}
node {
  name: "dense_4/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_4/kernel"
  input: "dense_4/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 360
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_4/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 360
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_4/bias"
    }
  }
}
node {
  name: "dense_4/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_4/bias"
}
node {
  name: "dense_4/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_4/bias"
  input: "dense_4/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/MatMul"
  op: "MatMul"
  input: "dense_2/Relu"
  input: "dense_4/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_4/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/BiasAdd"
  op: "BiasAdd"
  input: "dense_4/MatMul"
  input: "dense_4/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_4/Softmax"
  op: "Softmax"
  input: "dense_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cat_out/Shape"
  op: "Shape"
  input: "dense_5/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cat_out/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cat_out/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cat_out/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cat_out/strided_slice"
  op: "StridedSlice"
  input: "cat_out/Shape"
  input: "cat_out/strided_slice/stack"
  input: "cat_out/strided_slice/stack_1"
  input: "cat_out/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cat_out/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 54
      }
    }
  }
}
node {
  name: "cat_out/Reshape/shape"
  op: "Pack"
  input: "cat_out/strided_slice"
  input: "cat_out/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cat_out/Reshape"
  op: "Reshape"
  input: "dense_5/Softmax"
  input: "cat_out/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_out/Shape"
  op: "Shape"
  input: "dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_out/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_out/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_out/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_out/strided_slice"
  op: "StridedSlice"
  input: "reg_out/Shape"
  input: "reg_out/strided_slice/stack"
  input: "reg_out/strided_slice/stack_1"
  input: "reg_out/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_out/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_out/Reshape/shape"
  op: "Pack"
  input: "reg_out/strided_slice"
  input: "reg_out/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_out/Reshape"
  op: "Reshape"
  input: "dense_3/BiasAdd"
  input: "reg_out/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bin_out/Shape"
  op: "Shape"
  input: "dense_4/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bin_out/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bin_out/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bin_out/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bin_out/strided_slice"
  op: "StridedSlice"
  input: "bin_out/Shape"
  input: "bin_out/strided_slice/stack"
  input: "bin_out/strided_slice/stack_1"
  input: "bin_out/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bin_out/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 360
      }
    }
  }
}
node {
  name: "bin_out/Reshape/shape"
  op: "Pack"
  input: "bin_out/strided_slice"
  input: "bin_out/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bin_out/Reshape"
  op: "Reshape"
  input: "dense_4/Softmax"
  input: "bin_out/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp"
  op: "AssignVariableOp"
  input: "conv2d_1/kernel"
  input: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  input: "^AssignVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "conv2d_1/bias"
  input: "Placeholder_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "conv2d_1/bias"
  input: "^AssignVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "batch_normalization_1/gamma"
  input: "Placeholder_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "batch_normalization_1/gamma"
  input: "^AssignVariableOp_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "batch_normalization_1/beta"
  input: "Placeholder_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "batch_normalization_1/beta"
  input: "^AssignVariableOp_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "Placeholder_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "^AssignVariableOp_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "Placeholder_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_5"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "^AssignVariableOp_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "conv2d_2/kernel"
  input: "Placeholder_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_6"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  input: "^AssignVariableOp_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "conv2d_2/bias"
  input: "Placeholder_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_7"
  op: "ReadVariableOp"
  input: "conv2d_2/bias"
  input: "^AssignVariableOp_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "batch_normalization_2/gamma"
  input: "Placeholder_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_8"
  op: "ReadVariableOp"
  input: "batch_normalization_2/gamma"
  input: "^AssignVariableOp_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_9"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "batch_normalization_2/beta"
  input: "Placeholder_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_9"
  op: "ReadVariableOp"
  input: "batch_normalization_2/beta"
  input: "^AssignVariableOp_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_10"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "Placeholder_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_10"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "^AssignVariableOp_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_11"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "Placeholder_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_11"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "^AssignVariableOp_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_12"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "conv2d_3/kernel"
  input: "Placeholder_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_12"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  input: "^AssignVariableOp_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_13"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "conv2d_3/bias"
  input: "Placeholder_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_13"
  op: "ReadVariableOp"
  input: "conv2d_3/bias"
  input: "^AssignVariableOp_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_14"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "batch_normalization_3/gamma"
  input: "Placeholder_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_14"
  op: "ReadVariableOp"
  input: "batch_normalization_3/gamma"
  input: "^AssignVariableOp_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_15"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "batch_normalization_3/beta"
  input: "Placeholder_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_15"
  op: "ReadVariableOp"
  input: "batch_normalization_3/beta"
  input: "^AssignVariableOp_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_16"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "Placeholder_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_16"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "^AssignVariableOp_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_17"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "Placeholder_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_17"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "^AssignVariableOp_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_18"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "Placeholder_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_18"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  input: "^AssignVariableOp_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_19"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "Placeholder_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_19"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  input: "^AssignVariableOp_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_20"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "dense_2/kernel"
  input: "Placeholder_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_20"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  input: "^AssignVariableOp_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_21"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "dense_2/bias"
  input: "Placeholder_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_21"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  input: "^AssignVariableOp_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_22"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "dense_5/kernel"
  input: "Placeholder_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_22"
  op: "ReadVariableOp"
  input: "dense_5/kernel"
  input: "^AssignVariableOp_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_23"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "dense_5/bias"
  input: "Placeholder_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_23"
  op: "ReadVariableOp"
  input: "dense_5/bias"
  input: "^AssignVariableOp_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_24"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "dense_3/kernel"
  input: "Placeholder_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_24"
  op: "ReadVariableOp"
  input: "dense_3/kernel"
  input: "^AssignVariableOp_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_25"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "dense_3/bias"
  input: "Placeholder_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_25"
  op: "ReadVariableOp"
  input: "dense_3/bias"
  input: "^AssignVariableOp_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_26"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "dense_4/kernel"
  input: "Placeholder_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_26"
  op: "ReadVariableOp"
  input: "dense_4/kernel"
  input: "^AssignVariableOp_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_27"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "dense_4/bias"
  input: "Placeholder_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_27"
  op: "ReadVariableOp"
  input: "dense_4/bias"
  input: "^AssignVariableOp_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_2/bias"
}
node {
  name: "VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "conv2d_2/bias"
}
node {
  name: "VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_mean"
}
node {
  name: "VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dense_3/kernel"
}
node {
  name: "VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
}
node {
  name: "VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_variance"
}
node {
  name: "VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dense_4/bias"
}
node {
  name: "VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/gamma"
}
node {
  name: "VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "conv2d_3/bias"
}
node {
  name: "VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "dense_3/bias"
}
node {
  name: "VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_mean"
}
node {
  name: "VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "conv2d_3/kernel"
}
node {
  name: "VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "dense_5/kernel"
}
node {
  name: "VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_variance"
}
node {
  name: "VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "dense_5/bias"
}
node {
  name: "VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/gamma"
}
node {
  name: "VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/beta"
}
node {
  name: "VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "dense_4/kernel"
}
node {
  name: "VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
}
node {
  name: "VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/beta"
}
node {
  name: "VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "dense_2/kernel"
}
node {
  name: "VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "conv2d_2/kernel"
}
node {
  name: "init"
  op: "NoOp"
  input: "^batch_normalization_2/beta/Assign"
  input: "^batch_normalization_2/gamma/Assign"
  input: "^batch_normalization_2/moving_mean/Assign"
  input: "^batch_normalization_2/moving_variance/Assign"
  input: "^batch_normalization_3/beta/Assign"
  input: "^batch_normalization_3/gamma/Assign"
  input: "^batch_normalization_3/moving_mean/Assign"
  input: "^batch_normalization_3/moving_variance/Assign"
  input: "^conv2d_2/bias/Assign"
  input: "^conv2d_2/kernel/Assign"
  input: "^conv2d_3/bias/Assign"
  input: "^conv2d_3/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_3/bias/Assign"
  input: "^dense_3/kernel/Assign"
  input: "^dense_4/bias/Assign"
  input: "^dense_4/kernel/Assign"
  input: "^dense_5/bias/Assign"
  input: "^dense_5/kernel/Assign"
}
node {
  name: "Adam/iterations/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/iterations"
    }
  }
}
node {
  name: "Adam/iterations/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/iterations"
}
node {
  name: "Adam/iterations/Assign"
  op: "AssignVariableOp"
  input: "Adam/iterations"
  input: "Adam/iterations/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Adam/iterations/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/iterations"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Adam/learning_rate/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0003000000142492354
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/learning_rate"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/learning_rate"
    }
  }
}
node {
  name: "Adam/learning_rate/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/learning_rate"
}
node {
  name: "Adam/learning_rate/Assign"
  op: "AssignVariableOp"
  input: "Adam/learning_rate"
  input: "Adam/learning_rate/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/learning_rate/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/learning_rate"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/beta_1"
    }
  }
}
node {
  name: "Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/beta_1"
}
node {
  name: "Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "Adam/beta_1"
  input: "Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/beta_2"
    }
  }
}
node {
  name: "Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/beta_2"
}
node {
  name: "Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "Adam/beta_2"
  input: "Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/decay"
    }
  }
}
node {
  name: "Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/decay"
}
node {
  name: "Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "Adam/decay"
  input: "Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/decay"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cat_out_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "reg_out_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "bin_out_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "cat_out_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "reg_out_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "bin_out_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total"
    }
  }
}
node {
  name: "total/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total"
}
node {
  name: "total/Assign"
  op: "AssignVariableOp"
  input: "total"
  input: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count"
    }
  }
}
node {
  name: "count/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count"
}
node {
  name: "count/Assign"
  op: "AssignVariableOp"
  input: "count"
  input: "Const_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total_1"
    }
  }
}
node {
  name: "total_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total_1"
}
node {
  name: "total_1/Assign"
  op: "AssignVariableOp"
  input: "total_1"
  input: "Const_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count_1"
    }
  }
}
node {
  name: "count_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count_1"
}
node {
  name: "count_1/Assign"
  op: "AssignVariableOp"
  input: "count_1"
  input: "Const_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total_2"
    }
  }
}
node {
  name: "total_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total_2"
}
node {
  name: "total_2/Assign"
  op: "AssignVariableOp"
  input: "total_2"
  input: "Const_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count_2"
    }
  }
}
node {
  name: "count_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count_2"
}
node {
  name: "count_2/Assign"
  op: "AssignVariableOp"
  input: "count_2"
  input: "Const_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total_3"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_3"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total_3"
    }
  }
}
node {
  name: "total_3/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total_3"
}
node {
  name: "total_3/Assign"
  op: "AssignVariableOp"
  input: "total_3"
  input: "Const_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_3/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count_3"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count_3"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count_3"
    }
  }
}
node {
  name: "count_3/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count_3"
}
node {
  name: "count_3/Assign"
  op: "AssignVariableOp"
  input: "count_3"
  input: "Const_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count_3/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total_4"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_4"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total_4"
    }
  }
}
node {
  name: "total_4/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total_4"
}
node {
  name: "total_4/Assign"
  op: "AssignVariableOp"
  input: "total_4"
  input: "Const_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_4/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count_4"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count_4"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count_4"
    }
  }
}
node {
  name: "count_4/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count_4"
}
node {
  name: "count_4/Assign"
  op: "AssignVariableOp"
  input: "count_4"
  input: "Const_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count_4/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total_5"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_5"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total_5"
    }
  }
}
node {
  name: "total_5/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total_5"
}
node {
  name: "total_5/Assign"
  op: "AssignVariableOp"
  input: "total_5"
  input: "Const_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_5/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count_5"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count_5"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count_5"
    }
  }
}
node {
  name: "count_5/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count_5"
}
node {
  name: "count_5/Assign"
  op: "AssignVariableOp"
  input: "count_5"
  input: "Const_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count_5/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/ArgMax"
  op: "ArgMax"
  input: "cat_out_target"
  input: "metrics/cat_out_accuracy/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/ArgMax_1"
  op: "ArgMax"
  input: "cat_out/Reshape"
  input: "metrics/cat_out_accuracy/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/Equal"
  op: "Equal"
  input: "metrics/cat_out_accuracy/ArgMax"
  input: "metrics/cat_out_accuracy/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/Cast"
  op: "Cast"
  input: "metrics/cat_out_accuracy/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/Sum"
  op: "Sum"
  input: "metrics/cat_out_accuracy/Cast"
  input: "metrics/cat_out_accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "total"
  input: "metrics/cat_out_accuracy/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/cat_out_accuracy/AssignAddVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/Size"
  op: "Size"
  input: "metrics/cat_out_accuracy/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/Cast_1"
  op: "Cast"
  input: "metrics/cat_out_accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/AssignAddVariableOp_1"
  op: "AssignAddVariableOp"
  input: "count"
  input: "metrics/cat_out_accuracy/Cast_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/cat_out_accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/cat_out_accuracy/AssignAddVariableOp"
  input: "^metrics/cat_out_accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/truediv/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/cat_out_accuracy/AssignAddVariableOp"
  input: "^metrics/cat_out_accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/truediv"
  op: "RealDiv"
  input: "metrics/cat_out_accuracy/ReadVariableOp_2"
  input: "metrics/cat_out_accuracy/truediv/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/cat_out_accuracy/Identity"
  op: "Identity"
  input: "metrics/cat_out_accuracy/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/sub"
  op: "Sub"
  input: "reg_out_target"
  input: "reg_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 180.0
      }
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/add"
  op: "AddV2"
  input: "metrics/reg_out_angle_mae/sub"
  input: "metrics/reg_out_angle_mae/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/FloorMod/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 360.0
      }
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/FloorMod"
  op: "FloorMod"
  input: "metrics/reg_out_angle_mae/add"
  input: "metrics/reg_out_angle_mae/FloorMod/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 180.0
      }
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/sub_1"
  op: "Sub"
  input: "metrics/reg_out_angle_mae/FloorMod"
  input: "metrics/reg_out_angle_mae/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/Abs"
  op: "Abs"
  input: "metrics/reg_out_angle_mae/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/Mean"
  op: "Mean"
  input: "metrics/reg_out_angle_mae/Abs"
  input: "metrics/reg_out_angle_mae/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/Sum"
  op: "Sum"
  input: "metrics/reg_out_angle_mae/Mean"
  input: "metrics/reg_out_angle_mae/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "total_1"
  input: "metrics/reg_out_angle_mae/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_1"
  input: "^metrics/reg_out_angle_mae/AssignAddVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/Size"
  op: "Size"
  input: "metrics/reg_out_angle_mae/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/Cast"
  op: "Cast"
  input: "metrics/reg_out_angle_mae/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/AssignAddVariableOp_1"
  op: "AssignAddVariableOp"
  input: "count_1"
  input: "metrics/reg_out_angle_mae/Cast"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count_1"
  input: "^metrics/reg_out_angle_mae/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "total_1"
  input: "^metrics/reg_out_angle_mae/AssignAddVariableOp"
  input: "^metrics/reg_out_angle_mae/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/truediv/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_1"
  input: "^metrics/reg_out_angle_mae/AssignAddVariableOp"
  input: "^metrics/reg_out_angle_mae/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/truediv"
  op: "RealDiv"
  input: "metrics/reg_out_angle_mae/ReadVariableOp_2"
  input: "metrics/reg_out_angle_mae/truediv/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/reg_out_angle_mae/Identity"
  op: "Identity"
  input: "metrics/reg_out_angle_mae/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/ArgMax"
  op: "ArgMax"
  input: "bin_out_target"
  input: "metrics/bin_out_angle_bin_rmse/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/mul"
  op: "Mul"
  input: "metrics/bin_out_angle_bin_rmse/ArgMax"
  input: "metrics/bin_out_angle_bin_rmse/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/ArgMax_1"
  op: "ArgMax"
  input: "bin_out/Reshape"
  input: "metrics/bin_out_angle_bin_rmse/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/mul_1"
  op: "Mul"
  input: "metrics/bin_out_angle_bin_rmse/ArgMax_1"
  input: "metrics/bin_out_angle_bin_rmse/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/sub"
  op: "Sub"
  input: "metrics/bin_out_angle_bin_rmse/mul"
  input: "metrics/bin_out_angle_bin_rmse/mul_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 180
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/add"
  op: "AddV2"
  input: "metrics/bin_out_angle_bin_rmse/sub"
  input: "metrics/bin_out_angle_bin_rmse/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/FloorMod/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 360
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/FloorMod"
  op: "FloorMod"
  input: "metrics/bin_out_angle_bin_rmse/add"
  input: "metrics/bin_out_angle_bin_rmse/FloorMod/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 180
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/sub_1"
  op: "Sub"
  input: "metrics/bin_out_angle_bin_rmse/FloorMod"
  input: "metrics/bin_out_angle_bin_rmse/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Abs"
  op: "Abs"
  input: "metrics/bin_out_angle_bin_rmse/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Cast"
  op: "Cast"
  input: "metrics/bin_out_angle_bin_rmse/Abs"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Square"
  op: "Square"
  input: "metrics/bin_out_angle_bin_rmse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Mean"
  op: "Mean"
  input: "metrics/bin_out_angle_bin_rmse/Square"
  input: "metrics/bin_out_angle_bin_rmse/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/clip_by_value/Minimum"
  op: "Minimum"
  input: "metrics/bin_out_angle_bin_rmse/Mean"
  input: "metrics/bin_out_angle_bin_rmse/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/clip_by_value"
  op: "Maximum"
  input: "metrics/bin_out_angle_bin_rmse/clip_by_value/Minimum"
  input: "metrics/bin_out_angle_bin_rmse/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Sqrt"
  op: "Sqrt"
  input: "metrics/bin_out_angle_bin_rmse/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Sum"
  op: "Sum"
  input: "metrics/bin_out_angle_bin_rmse/Sqrt"
  input: "metrics/bin_out_angle_bin_rmse/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "total_2"
  input: "metrics/bin_out_angle_bin_rmse/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_2"
  input: "^metrics/bin_out_angle_bin_rmse/AssignAddVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Cast_1"
  op: "Cast"
  input: "metrics/bin_out_angle_bin_rmse/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/AssignAddVariableOp_1"
  op: "AssignAddVariableOp"
  input: "count_2"
  input: "metrics/bin_out_angle_bin_rmse/Cast_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count_2"
  input: "^metrics/bin_out_angle_bin_rmse/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "total_2"
  input: "^metrics/bin_out_angle_bin_rmse/AssignAddVariableOp"
  input: "^metrics/bin_out_angle_bin_rmse/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/truediv/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_2"
  input: "^metrics/bin_out_angle_bin_rmse/AssignAddVariableOp"
  input: "^metrics/bin_out_angle_bin_rmse/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/truediv"
  op: "RealDiv"
  input: "metrics/bin_out_angle_bin_rmse/ReadVariableOp_2"
  input: "metrics/bin_out_angle_bin_rmse/truediv/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/bin_out_angle_bin_rmse/Identity"
  op: "Identity"
  input: "metrics/bin_out_angle_bin_rmse/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/Sum"
  op: "Sum"
  input: "cat_out/Reshape"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/truediv"
  op: "RealDiv"
  input: "cat_out/Reshape"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/sub"
  op: "Sub"
  input: "loss/cat_out_loss/categorical_crossentropy/sub/x"
  input: "loss/cat_out_loss/categorical_crossentropy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/cat_out_loss/categorical_crossentropy/truediv"
  input: "loss/cat_out_loss/categorical_crossentropy/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/clip_by_value"
  op: "Maximum"
  input: "loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
  input: "loss/cat_out_loss/categorical_crossentropy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/Log"
  op: "Log"
  input: "loss/cat_out_loss/categorical_crossentropy/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/mul"
  op: "Mul"
  input: "cat_out_target"
  input: "loss/cat_out_loss/categorical_crossentropy/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/Sum_1"
  op: "Sum"
  input: "loss/cat_out_loss/categorical_crossentropy/mul"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/Neg"
  op: "Neg"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
  op: "Mul"
  input: "cat_out_sample_weights"
  input: "loss/cat_out_loss/categorical_crossentropy/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum"
  op: "Sum"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/num_elements/Size"
  op: "Size"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/num_elements/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
  op: "RealDiv"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/Sum"
  op: "Sum"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
  input: "loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "total_3"
  input: "loss/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_3"
  input: "^loss/AssignAddVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/Cast"
  op: "Cast"
  input: "loss/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/AssignAddVariableOp_1"
  op: "AssignAddVariableOp"
  input: "count_3"
  input: "loss/Cast"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count_3"
  input: "^loss/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "total_3"
  input: "^loss/AssignAddVariableOp"
  input: "^loss/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/truediv/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_3"
  input: "^loss/AssignAddVariableOp"
  input: "^loss/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/truediv"
  op: "RealDiv"
  input: "loss/ReadVariableOp_2"
  input: "loss/truediv/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Identity"
  op: "Identity"
  input: "loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/sub"
  op: "Sub"
  input: "reg_out_target"
  input: "reg_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 180.0
      }
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/add"
  op: "AddV2"
  input: "loss/reg_out_loss/angle_mse/sub"
  input: "loss/reg_out_loss/angle_mse/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/FloorMod/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 360.0
      }
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/FloorMod"
  op: "FloorMod"
  input: "loss/reg_out_loss/angle_mse/add"
  input: "loss/reg_out_loss/angle_mse/FloorMod/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 180.0
      }
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/sub_1"
  op: "Sub"
  input: "loss/reg_out_loss/angle_mse/FloorMod"
  input: "loss/reg_out_loss/angle_mse/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/Square"
  op: "Square"
  input: "loss/reg_out_loss/angle_mse/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/Mean"
  op: "Mean"
  input: "loss/reg_out_loss/angle_mse/Square"
  input: "loss/reg_out_loss/angle_mse/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/weighted_loss/mul"
  op: "Mul"
  input: "reg_out_sample_weights"
  input: "loss/reg_out_loss/angle_mse/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/weighted_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/weighted_loss/Sum"
  op: "Sum"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/mul"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/weighted_loss/num_elements/Size"
  op: "Size"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/num_elements/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/reg_out_loss/angle_mse/weighted_loss/truediv"
  op: "RealDiv"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/Sum"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/Sum_1"
  op: "Sum"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/truediv"
  input: "loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/AssignAddVariableOp_2"
  op: "AssignAddVariableOp"
  input: "total_4"
  input: "loss/Sum_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "total_4"
  input: "^loss/AssignAddVariableOp_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Size_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/Cast_1"
  op: "Cast"
  input: "loss/Size_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/AssignAddVariableOp_3"
  op: "AssignAddVariableOp"
  input: "count_4"
  input: "loss/Cast_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "count_4"
  input: "^loss/AssignAddVariableOp_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/ReadVariableOp_5"
  op: "ReadVariableOp"
  input: "total_4"
  input: "^loss/AssignAddVariableOp_2"
  input: "^loss/AssignAddVariableOp_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/truediv_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_4"
  input: "^loss/AssignAddVariableOp_2"
  input: "^loss/AssignAddVariableOp_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/truediv_1"
  op: "RealDiv"
  input: "loss/ReadVariableOp_5"
  input: "loss/truediv_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Identity_1"
  op: "Identity"
  input: "loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/mul_1"
  op: "Mul"
  input: "loss/mul_1/x"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add"
  op: "AddV2"
  input: "loss/mul"
  input: "loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/Sum"
  op: "Sum"
  input: "bin_out/Reshape"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/truediv"
  op: "RealDiv"
  input: "bin_out/Reshape"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/sub"
  op: "Sub"
  input: "loss/bin_out_loss/categorical_crossentropy/sub/x"
  input: "loss/bin_out_loss/categorical_crossentropy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/bin_out_loss/categorical_crossentropy/truediv"
  input: "loss/bin_out_loss/categorical_crossentropy/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/clip_by_value"
  op: "Maximum"
  input: "loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
  input: "loss/bin_out_loss/categorical_crossentropy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/Log"
  op: "Log"
  input: "loss/bin_out_loss/categorical_crossentropy/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/mul"
  op: "Mul"
  input: "bin_out_target"
  input: "loss/bin_out_loss/categorical_crossentropy/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/Sum_1"
  op: "Sum"
  input: "loss/bin_out_loss/categorical_crossentropy/mul"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/Neg"
  op: "Neg"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
  op: "Mul"
  input: "bin_out_sample_weights"
  input: "loss/bin_out_loss/categorical_crossentropy/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum"
  op: "Sum"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/num_elements/Size"
  op: "Size"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/num_elements/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
  op: "RealDiv"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/Sum_2"
  op: "Sum"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
  input: "loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/AssignAddVariableOp_4"
  op: "AssignAddVariableOp"
  input: "total_5"
  input: "loss/Sum_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/ReadVariableOp_6"
  op: "ReadVariableOp"
  input: "total_5"
  input: "^loss/AssignAddVariableOp_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Size_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/Cast_2"
  op: "Cast"
  input: "loss/Size_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/AssignAddVariableOp_5"
  op: "AssignAddVariableOp"
  input: "count_5"
  input: "loss/Cast_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/ReadVariableOp_7"
  op: "ReadVariableOp"
  input: "count_5"
  input: "^loss/AssignAddVariableOp_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/ReadVariableOp_8"
  op: "ReadVariableOp"
  input: "total_5"
  input: "^loss/AssignAddVariableOp_4"
  input: "^loss/AssignAddVariableOp_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/truediv_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_5"
  input: "^loss/AssignAddVariableOp_4"
  input: "^loss/AssignAddVariableOp_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/truediv_2"
  op: "RealDiv"
  input: "loss/ReadVariableOp_8"
  input: "loss/truediv_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Identity_2"
  op: "Identity"
  input: "loss/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul_2"
  op: "Mul"
  input: "loss/mul_2/x"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_1"
  op: "AddV2"
  input: "loss/add"
  input: "loss/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "loss/add_1"
  input: "Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Mean_grad/Reshape"
  input: "training/Adam/gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/Mean_grad/Tile"
  input: "training/Adam/gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Mean_grad/truediv"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Mean_grad/truediv"
  input: "loss/mul_2/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Mean_grad/truediv"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Mean_grad/truediv"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Mean_grad/truediv"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Mean_grad/truediv"
  input: "loss/mul_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/mul_2_grad/Mul_1"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Neg"
  op: "Neg"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Neg"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv_1"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Neg"
  op: "Neg"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Neg"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv_1"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/mul_1_grad/Mul_1"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Neg"
  op: "Neg"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Neg"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/RealDiv_1"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/weighted_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape"
  op: "Shape"
  input: "bin_out_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/bin_out_loss/categorical_crossentropy/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Tile"
  input: "loss/bin_out_loss/categorical_crossentropy/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Mul"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "bin_out_sample_weights"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape"
  op: "Shape"
  input: "cat_out_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/cat_out_loss/categorical_crossentropy/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Tile"
  input: "loss/cat_out_loss/categorical_crossentropy/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Mul"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "cat_out_sample_weights"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Shape"
  op: "Shape"
  input: "reg_out_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/Sum_grad/Tile"
  input: "loss/reg_out_loss/angle_mse/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Mul"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "reg_out_sample_weights"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/weighted_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/weighted_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Shape"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/add"
  op: "AddV2"
  input: "loss/reg_out_loss/angle_mse/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/add"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Size"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/range"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/mod"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/weighted_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/bin_out_loss/categorical_crossentropy/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/add"
  op: "AddV2"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/cat_out_loss/categorical_crossentropy/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/add"
  op: "AddV2"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/truediv"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Square_grad/Mul"
  op: "Mul"
  input: "loss/reg_out_loss/angle_mse/sub_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Mean_grad/truediv"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Shape"
  op: "Shape"
  input: "bin_out_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/bin_out_loss/categorical_crossentropy/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Tile"
  input: "loss/bin_out_loss/categorical_crossentropy/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Mul"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Mul_1"
  op: "Mul"
  input: "bin_out_target"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Shape"
  op: "Shape"
  input: "cat_out_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/cat_out_loss/categorical_crossentropy/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Tile"
  input: "loss/cat_out_loss/categorical_crossentropy/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Mul"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Mul_1"
  op: "Mul"
  input: "cat_out_target"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Shape"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/FloorMod"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Shape_1"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Shape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Square_grad/Mul_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/Square_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Neg"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/bin_out_loss/categorical_crossentropy/clip_by_value"
  input: "^training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/cat_out_loss/categorical_crossentropy/clip_by_value"
  input: "^training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Shape"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Shape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/FloorDiv"
  op: "FloorDiv"
  input: "loss/reg_out_loss/angle_mse/add"
  input: "loss/reg_out_loss/angle_mse/FloorMod/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/FloorDiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_1_grad/Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/mul"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Sum_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/FloorMod"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
  input: "loss/bin_out_loss/categorical_crossentropy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Log_grad/mul"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
  input: "loss/cat_out_loss/categorical_crossentropy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Log_grad/mul"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Shape"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Shape_1"
  op: "Shape"
  input: "loss/reg_out_loss/angle_mse/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Shape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/FloorMod_grad/Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Sum_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/bin_out_loss/categorical_crossentropy/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/bin_out_loss/categorical_crossentropy/truediv"
  input: "loss/bin_out_loss/categorical_crossentropy/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/cat_out_loss/categorical_crossentropy/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/cat_out_loss/categorical_crossentropy/truediv"
  input: "loss/cat_out_loss/categorical_crossentropy/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Shape"
  op: "Shape"
  input: "reg_out_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Shape_1"
  op: "Shape"
  input: "reg_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Shape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Neg"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Sum_1"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/reg_out_loss/angle_mse/sub"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Shape"
  op: "Shape"
  input: "bin_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Reshape"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Neg"
  op: "Neg"
  input: "bin_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Neg"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/RealDiv_1"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/mul"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Shape"
  op: "Shape"
  input: "cat_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Reshape"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Neg"
  op: "Neg"
  input: "cat_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Neg"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/RealDiv_1"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/mul"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/reg_out/Reshape_grad/Shape"
  op: "Shape"
  input: "dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@reg_out/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/reg_out/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/reg_out_loss/angle_mse/sub_grad/Reshape_1"
  input: "training/Adam/gradients/reg_out/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@reg_out/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Shape"
  op: "Shape"
  input: "bin_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/add"
  op: "AddV2"
  input: "loss/bin_out_loss/categorical_crossentropy/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/add"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Size"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/range"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/mod"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Shape"
  op: "Shape"
  input: "cat_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/add"
  op: "AddV2"
  input: "loss/cat_out_loss/categorical_crossentropy/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/add"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Size"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/range"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/mod"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/reg_out/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/bin_out_loss/categorical_crossentropy/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/bin_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bin_out/Reshape_grad/Shape"
  op: "Shape"
  input: "dense_4/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bin_out/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bin_out/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/bin_out/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bin_out/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/cat_out_loss/categorical_crossentropy/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/cat_out_loss/categorical_crossentropy/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/cat_out/Reshape_grad/Shape"
  op: "Shape"
  input: "dense_5/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cat_out/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/cat_out/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_1"
  input: "training/Adam/gradients/cat_out/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cat_out/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_3/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/reg_out/Reshape_grad/Reshape"
  input: "dense_3/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_3/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_2/Relu"
  input: "training/Adam/gradients/reg_out/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/bin_out/Reshape_grad/Reshape"
  input: "dense_4/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_4/Softmax_grad/mul"
  input: "training/Adam/gradients/dense_4/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/bin_out/Reshape_grad/Reshape"
  input: "training/Adam/gradients/dense_4/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_4/Softmax_grad/sub"
  input: "dense_4/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_5/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/cat_out/Reshape_grad/Reshape"
  input: "dense_5/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_5/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_5/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_5/Softmax_grad/mul"
  input: "training/Adam/gradients/dense_5/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_5/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/cat_out/Reshape_grad/Reshape"
  input: "training/Adam/gradients/dense_5/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_5/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_5/Softmax_grad/sub"
  input: "dense_5/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_4/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_5/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_5/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_4/Softmax_grad/mul_1"
  input: "dense_4/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_2/Relu"
  input: "training/Adam/gradients/dense_4/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_5/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_5/Softmax_grad/mul_1"
  input: "dense_5/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_5/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_2/Relu"
  input: "training/Adam/gradients/dense_5/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_5/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/dense_3/MatMul_grad/MatMul"
  input: "training/Adam/gradients/dense_4/MatMul_grad/MatMul"
  input: "training/Adam/gradients/dense_5/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/MatMul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/AddN_2"
  input: "dense_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_2/Relu_grad/ReluGrad"
  input: "dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout2/Identity"
  input: "training/Adam/gradients/dense_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  input: "dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1/Relu_grad/ReluGrad"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout1/Identity"
  input: "training/Adam/gradients/dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/flatten_1/Reshape_grad/Shape"
  op: "Shape"
  input: "max_pooling2d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@flatten_1/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/flatten_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/flatten_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@flatten_1/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling2d_3/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "batch_normalization_3/FusedBatchNormV3_1"
  input: "max_pooling2d_3/MaxPool"
  input: "training/Adam/gradients/flatten_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling2d_3/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "batch_normalization_3/FusedBatchNormV3_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "batch_normalization_3/FusedBatchNormV3_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "batch_normalization_3/FusedBatchNormV3_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "batch_normalization_3/FusedBatchNormV3_1:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "batch_normalization_3/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/batch_normalization_3/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "training/Adam/gradients/max_pooling2d_3/MaxPool_grad/MaxPoolGrad"
  input: "conv2d_3/Relu"
  input: "batch_normalization_3/ReadVariableOp_6"
  input: "batch_normalization_3/FusedBatchNormV3_1/ReadVariableOp"
  input: "batch_normalization_3/FusedBatchNormV3_1/ReadVariableOp_1"
  input: "batch_normalization_3/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/FusedBatchNormV3_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/batch_normalization_3/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  input: "conv2d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/conv2d_3/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_3/convolution_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling2d_2/MaxPool"
  input: "conv2d_3/convolution/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/convolution"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_3/convolution_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv2d_3/convolution_grad/ShapeN"
  input: "conv2d_3/convolution/ReadVariableOp"
  input: "training/Adam/gradients/conv2d_3/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/convolution"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_3/convolution_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "max_pooling2d_2/MaxPool"
  input: "training/Adam/gradients/conv2d_3/convolution_grad/ShapeN:1"
  input: "training/Adam/gradients/conv2d_3/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/convolution"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling2d_2/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "batch_normalization_2/FusedBatchNormV3_1"
  input: "max_pooling2d_2/MaxPool"
  input: "training/Adam/gradients/conv2d_3/convolution_grad/Conv2DBackpropInput"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling2d_2/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "batch_normalization_2/FusedBatchNormV3_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_6"
  op: "ZerosLike"
  input: "batch_normalization_2/FusedBatchNormV3_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_7"
  op: "ZerosLike"
  input: "batch_normalization_2/FusedBatchNormV3_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_8"
  op: "ZerosLike"
  input: "batch_normalization_2/FusedBatchNormV3_1:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_9"
  op: "ZerosLike"
  input: "batch_normalization_2/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/batch_normalization_2/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "training/Adam/gradients/max_pooling2d_2/MaxPool_grad/MaxPoolGrad"
  input: "conv2d_2/Relu"
  input: "batch_normalization_2/ReadVariableOp_6"
  input: "batch_normalization_2/FusedBatchNormV3_1/ReadVariableOp"
  input: "batch_normalization_2/FusedBatchNormV3_1/ReadVariableOp_1"
  input: "batch_normalization_2/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/FusedBatchNormV3_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/batch_normalization_2/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  input: "conv2d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/conv2d_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_2/convolution_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling2d_1/MaxPool"
  input: "conv2d_2/convolution/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/convolution"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_2/convolution_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv2d_2/convolution_grad/ShapeN"
  input: "conv2d_2/convolution/ReadVariableOp"
  input: "training/Adam/gradients/conv2d_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/convolution"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_2/convolution_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "max_pooling2d_1/MaxPool"
  input: "training/Adam/gradients/conv2d_2/convolution_grad/ShapeN:1"
  input: "training/Adam/gradients/conv2d_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/convolution"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling2d_1/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "batch_normalization_1/FusedBatchNormV3_1"
  input: "max_pooling2d_1/MaxPool"
  input: "training/Adam/gradients/conv2d_2/convolution_grad/Conv2DBackpropInput"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling2d_1/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_10"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNormV3_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_11"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNormV3_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_12"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNormV3_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_13"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNormV3_1:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_14"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/FusedBatchNormV3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/batch_normalization_1/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "training/Adam/gradients/max_pooling2d_1/MaxPool_grad/MaxPoolGrad"
  input: "conv2d_1/Relu"
  input: "batch_normalization_1/ReadVariableOp_6"
  input: "batch_normalization_1/FusedBatchNormV3_1/ReadVariableOp"
  input: "batch_normalization_1/FusedBatchNormV3_1/ReadVariableOp_1"
  input: "batch_normalization_1/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/FusedBatchNormV3_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/batch_normalization_1/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  input: "conv2d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/conv2d_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_1/convolution_grad/ShapeN"
  op: "ShapeN"
  input: "input_1"
  input: "conv2d_1/convolution/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/convolution"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_1/convolution_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv2d_1/convolution_grad/ShapeN"
  input: "conv2d_1/convolution/ReadVariableOp"
  input: "training/Adam/gradients/conv2d_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/convolution"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv2d_1/convolution_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "input_1"
  input: "training/Adam/gradients/conv2d_1/convolution_grad/ShapeN:1"
  input: "training/Adam/gradients/conv2d_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/convolution"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "Adam/iterations"
  input: "training/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/iterations"
  input: "^training/Adam/AssignAddVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/Cast/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/iterations"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "training/Adam/Cast/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "AddV2"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "training/Adam/Pow/ReadVariableOp"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "training/Adam/Pow_1/ReadVariableOp"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "Adam/learning_rate"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_1"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_0_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_0_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_0_1"
    }
  }
}
node {
  name: "training/Adam/m_0_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_0_1"
}
node {
  name: "training/Adam/m_0_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_0_1"
  input: "training/Adam/m_0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_0_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_0_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_1_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_1_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_1_1"
    }
  }
}
node {
  name: "training/Adam/m_1_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_1_1"
}
node {
  name: "training/Adam/m_1_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_1_1"
  input: "training/Adam/m_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_1_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_1_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_2_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_2_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_2_1"
    }
  }
}
node {
  name: "training/Adam/m_2_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_2_1"
}
node {
  name: "training/Adam/m_2_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_2_1"
  input: "training/Adam/m_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_2_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_2_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_3_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_3_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_3_1"
    }
  }
}
node {
  name: "training/Adam/m_3_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_3_1"
}
node {
  name: "training/Adam/m_3_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_3_1"
  input: "training/Adam/m_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_3_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_3_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/m_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_4"
  op: "Fill"
  input: "training/Adam/m_4/shape_as_tensor"
  input: "training/Adam/m_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/m_4_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_4_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_4_1"
    }
  }
}
node {
  name: "training/Adam/m_4_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_4_1"
}
node {
  name: "training/Adam/m_4_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_4_1"
  input: "training/Adam/m_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_4_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_4_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_5_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_5_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_5_1"
    }
  }
}
node {
  name: "training/Adam/m_5_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_5_1"
}
node {
  name: "training/Adam/m_5_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_5_1"
  input: "training/Adam/m_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_5_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_5_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_6_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_6_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_6_1"
    }
  }
}
node {
  name: "training/Adam/m_6_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_6_1"
}
node {
  name: "training/Adam/m_6_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_6_1"
  input: "training/Adam/m_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_6_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_6_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_7_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_7_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_7_1"
    }
  }
}
node {
  name: "training/Adam/m_7_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_7_1"
}
node {
  name: "training/Adam/m_7_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_7_1"
  input: "training/Adam/m_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_7_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_7_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/m_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_8"
  op: "Fill"
  input: "training/Adam/m_8/shape_as_tensor"
  input: "training/Adam/m_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/m_8_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_8_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_8_1"
    }
  }
}
node {
  name: "training/Adam/m_8_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_8_1"
}
node {
  name: "training/Adam/m_8_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_8_1"
  input: "training/Adam/m_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_8_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_8_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_9_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_9_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_9_1"
    }
  }
}
node {
  name: "training/Adam/m_9_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_9_1"
}
node {
  name: "training/Adam/m_9_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_9_1"
  input: "training/Adam/m_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_9_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_9_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_10_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_10_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_10_1"
    }
  }
}
node {
  name: "training/Adam/m_10_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_10_1"
}
node {
  name: "training/Adam/m_10_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_10_1"
  input: "training/Adam/m_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_10_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_10_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_11_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_11_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_11_1"
    }
  }
}
node {
  name: "training/Adam/m_11_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_11_1"
}
node {
  name: "training/Adam/m_11_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_11_1"
  input: "training/Adam/m_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_11_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_11_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_12/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/m_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_12"
  op: "Fill"
  input: "training/Adam/m_12/shape_as_tensor"
  input: "training/Adam/m_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/m_12_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_12_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_12_1"
    }
  }
}
node {
  name: "training/Adam/m_12_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_12_1"
}
node {
  name: "training/Adam/m_12_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_12_1"
  input: "training/Adam/m_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_12_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_12_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_13_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_13_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_13_1"
    }
  }
}
node {
  name: "training/Adam/m_13_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_13_1"
}
node {
  name: "training/Adam/m_13_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_13_1"
  input: "training/Adam/m_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_13_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_13_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/m_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_14"
  op: "Fill"
  input: "training/Adam/m_14/shape_as_tensor"
  input: "training/Adam/m_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/m_14_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_14_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_14_1"
    }
  }
}
node {
  name: "training/Adam/m_14_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_14_1"
}
node {
  name: "training/Adam/m_14_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_14_1"
  input: "training/Adam/m_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_14_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_14_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_15_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_15_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_15_1"
    }
  }
}
node {
  name: "training/Adam/m_15_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_15_1"
}
node {
  name: "training/Adam/m_15_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_15_1"
  input: "training/Adam/m_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_15_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_15_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\0006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/m_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_16"
  op: "Fill"
  input: "training/Adam/m_16/shape_as_tensor"
  input: "training/Adam/m_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/m_16_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_16_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 54
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_16_1"
    }
  }
}
node {
  name: "training/Adam/m_16_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_16_1"
}
node {
  name: "training/Adam/m_16_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_16_1"
  input: "training/Adam/m_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_16_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_16_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 54
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_17_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_17_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 54
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_17_1"
    }
  }
}
node {
  name: "training/Adam/m_17_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_17_1"
}
node {
  name: "training/Adam/m_17_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_17_1"
  input: "training/Adam/m_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_17_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_17_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_18_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_18_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_18_1"
    }
  }
}
node {
  name: "training/Adam/m_18_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_18_1"
}
node {
  name: "training/Adam/m_18_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_18_1"
  input: "training/Adam/m_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_18_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_18_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_19_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_19_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_19_1"
    }
  }
}
node {
  name: "training/Adam/m_19_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_19_1"
}
node {
  name: "training/Adam/m_19_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_19_1"
  input: "training/Adam/m_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_19_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_19_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000h\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/m_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_20"
  op: "Fill"
  input: "training/Adam/m_20/shape_as_tensor"
  input: "training/Adam/m_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/m_20_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_20_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 360
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_20_1"
    }
  }
}
node {
  name: "training/Adam/m_20_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_20_1"
}
node {
  name: "training/Adam/m_20_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_20_1"
  input: "training/Adam/m_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_20_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_20_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 360
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/m_21_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/m_21_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 360
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/m_21_1"
    }
  }
}
node {
  name: "training/Adam/m_21_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_21_1"
}
node {
  name: "training/Adam/m_21_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/m_21_1"
  input: "training/Adam/m_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/m_21_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_21_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_0_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_0_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_0_1"
    }
  }
}
node {
  name: "training/Adam/v_0_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_0_1"
}
node {
  name: "training/Adam/v_0_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_0_1"
  input: "training/Adam/v_0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_0_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_0_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_1_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_1_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_1_1"
    }
  }
}
node {
  name: "training/Adam/v_1_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_1_1"
}
node {
  name: "training/Adam/v_1_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_1_1"
  input: "training/Adam/v_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_1_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_1_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_2_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_2_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_2_1"
    }
  }
}
node {
  name: "training/Adam/v_2_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_2_1"
}
node {
  name: "training/Adam/v_2_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_2_1"
  input: "training/Adam/v_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_2_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_2_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_3_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_3_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_3_1"
    }
  }
}
node {
  name: "training/Adam/v_3_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_3_1"
}
node {
  name: "training/Adam/v_3_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_3_1"
  input: "training/Adam/v_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_3_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_3_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/v_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_4"
  op: "Fill"
  input: "training/Adam/v_4/shape_as_tensor"
  input: "training/Adam/v_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/v_4_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_4_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_4_1"
    }
  }
}
node {
  name: "training/Adam/v_4_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_4_1"
}
node {
  name: "training/Adam/v_4_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_4_1"
  input: "training/Adam/v_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_4_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_4_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_5_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_5_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_5_1"
    }
  }
}
node {
  name: "training/Adam/v_5_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_5_1"
}
node {
  name: "training/Adam/v_5_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_5_1"
  input: "training/Adam/v_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_5_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_5_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_6_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_6_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_6_1"
    }
  }
}
node {
  name: "training/Adam/v_6_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_6_1"
}
node {
  name: "training/Adam/v_6_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_6_1"
  input: "training/Adam/v_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_6_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_6_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_7_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_7_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_7_1"
    }
  }
}
node {
  name: "training/Adam/v_7_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_7_1"
}
node {
  name: "training/Adam/v_7_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_7_1"
  input: "training/Adam/v_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_7_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_7_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/v_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_8"
  op: "Fill"
  input: "training/Adam/v_8/shape_as_tensor"
  input: "training/Adam/v_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/v_8_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_8_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_8_1"
    }
  }
}
node {
  name: "training/Adam/v_8_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_8_1"
}
node {
  name: "training/Adam/v_8_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_8_1"
  input: "training/Adam/v_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_8_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_8_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_9_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_9_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_9_1"
    }
  }
}
node {
  name: "training/Adam/v_9_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_9_1"
}
node {
  name: "training/Adam/v_9_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_9_1"
  input: "training/Adam/v_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_9_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_9_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_10_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_10_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_10_1"
    }
  }
}
node {
  name: "training/Adam/v_10_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_10_1"
}
node {
  name: "training/Adam/v_10_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_10_1"
  input: "training/Adam/v_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_10_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_10_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_11_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_11_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_11_1"
    }
  }
}
node {
  name: "training/Adam/v_11_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_11_1"
}
node {
  name: "training/Adam/v_11_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_11_1"
  input: "training/Adam/v_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_11_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_11_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_12/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/v_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_12"
  op: "Fill"
  input: "training/Adam/v_12/shape_as_tensor"
  input: "training/Adam/v_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/v_12_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_12_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_12_1"
    }
  }
}
node {
  name: "training/Adam/v_12_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_12_1"
}
node {
  name: "training/Adam/v_12_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_12_1"
  input: "training/Adam/v_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_12_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_12_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_13_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_13_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_13_1"
    }
  }
}
node {
  name: "training/Adam/v_13_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_13_1"
}
node {
  name: "training/Adam/v_13_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_13_1"
  input: "training/Adam/v_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_13_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_13_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/v_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_14"
  op: "Fill"
  input: "training/Adam/v_14/shape_as_tensor"
  input: "training/Adam/v_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/v_14_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_14_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_14_1"
    }
  }
}
node {
  name: "training/Adam/v_14_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_14_1"
}
node {
  name: "training/Adam/v_14_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_14_1"
  input: "training/Adam/v_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_14_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_14_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_15_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_15_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_15_1"
    }
  }
}
node {
  name: "training/Adam/v_15_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_15_1"
}
node {
  name: "training/Adam/v_15_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_15_1"
  input: "training/Adam/v_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_15_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_15_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\0006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/v_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_16"
  op: "Fill"
  input: "training/Adam/v_16/shape_as_tensor"
  input: "training/Adam/v_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/v_16_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_16_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 54
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_16_1"
    }
  }
}
node {
  name: "training/Adam/v_16_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_16_1"
}
node {
  name: "training/Adam/v_16_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_16_1"
  input: "training/Adam/v_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_16_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_16_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 54
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_17_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_17_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 54
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_17_1"
    }
  }
}
node {
  name: "training/Adam/v_17_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_17_1"
}
node {
  name: "training/Adam/v_17_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_17_1"
  input: "training/Adam/v_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_17_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_17_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_18_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_18_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_18_1"
    }
  }
}
node {
  name: "training/Adam/v_18_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_18_1"
}
node {
  name: "training/Adam/v_18_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_18_1"
  input: "training/Adam/v_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_18_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_18_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_19_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_19_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_19_1"
    }
  }
}
node {
  name: "training/Adam/v_19_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_19_1"
}
node {
  name: "training/Adam/v_19_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_19_1"
  input: "training/Adam/v_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_19_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_19_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000h\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/v_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_20"
  op: "Fill"
  input: "training/Adam/v_20/shape_as_tensor"
  input: "training/Adam/v_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/v_20_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_20_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 360
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_20_1"
    }
  }
}
node {
  name: "training/Adam/v_20_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_20_1"
}
node {
  name: "training/Adam/v_20_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_20_1"
  input: "training/Adam/v_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_20_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_20_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 360
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/v_21_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/v_21_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 360
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/v_21_1"
    }
  }
}
node {
  name: "training/Adam/v_21_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_21_1"
}
node {
  name: "training/Adam/v_21_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/v_21_1"
  input: "training/Adam/v_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/v_21_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_21_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_0/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_0/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_0"
  op: "Fill"
  input: "training/Adam/vhat_0/shape_as_tensor"
  input: "training/Adam/vhat_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_0_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_0_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_0_1"
    }
  }
}
node {
  name: "training/Adam/vhat_0_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_0_1"
}
node {
  name: "training/Adam/vhat_0_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_0_1"
  input: "training/Adam/vhat_0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_0_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_0_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_1"
  op: "Fill"
  input: "training/Adam/vhat_1/shape_as_tensor"
  input: "training/Adam/vhat_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_1_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_1_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_1_1"
    }
  }
}
node {
  name: "training/Adam/vhat_1_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_1_1"
}
node {
  name: "training/Adam/vhat_1_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_1_1"
  input: "training/Adam/vhat_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_1_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_1_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_2"
  op: "Fill"
  input: "training/Adam/vhat_2/shape_as_tensor"
  input: "training/Adam/vhat_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_2_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_2_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_2_1"
    }
  }
}
node {
  name: "training/Adam/vhat_2_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_2_1"
}
node {
  name: "training/Adam/vhat_2_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_2_1"
  input: "training/Adam/vhat_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_2_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_2_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_3"
  op: "Fill"
  input: "training/Adam/vhat_3/shape_as_tensor"
  input: "training/Adam/vhat_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_3_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_3_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_3_1"
    }
  }
}
node {
  name: "training/Adam/vhat_3_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_3_1"
}
node {
  name: "training/Adam/vhat_3_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_3_1"
  input: "training/Adam/vhat_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_3_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_3_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_4"
  op: "Fill"
  input: "training/Adam/vhat_4/shape_as_tensor"
  input: "training/Adam/vhat_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_4_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_4_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_4_1"
    }
  }
}
node {
  name: "training/Adam/vhat_4_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_4_1"
}
node {
  name: "training/Adam/vhat_4_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_4_1"
  input: "training/Adam/vhat_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_4_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_4_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_5/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_5"
  op: "Fill"
  input: "training/Adam/vhat_5/shape_as_tensor"
  input: "training/Adam/vhat_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_5_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_5_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_5_1"
    }
  }
}
node {
  name: "training/Adam/vhat_5_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_5_1"
}
node {
  name: "training/Adam/vhat_5_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_5_1"
  input: "training/Adam/vhat_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_5_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_5_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_6"
  op: "Fill"
  input: "training/Adam/vhat_6/shape_as_tensor"
  input: "training/Adam/vhat_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_6_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_6_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_6_1"
    }
  }
}
node {
  name: "training/Adam/vhat_6_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_6_1"
}
node {
  name: "training/Adam/vhat_6_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_6_1"
  input: "training/Adam/vhat_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_6_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_6_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_7"
  op: "Fill"
  input: "training/Adam/vhat_7/shape_as_tensor"
  input: "training/Adam/vhat_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_7_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_7_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_7_1"
    }
  }
}
node {
  name: "training/Adam/vhat_7_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_7_1"
}
node {
  name: "training/Adam/vhat_7_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_7_1"
  input: "training/Adam/vhat_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_7_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_7_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_8"
  op: "Fill"
  input: "training/Adam/vhat_8/shape_as_tensor"
  input: "training/Adam/vhat_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_8_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_8_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_8_1"
    }
  }
}
node {
  name: "training/Adam/vhat_8_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_8_1"
}
node {
  name: "training/Adam/vhat_8_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_8_1"
  input: "training/Adam/vhat_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_8_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_8_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_9"
  op: "Fill"
  input: "training/Adam/vhat_9/shape_as_tensor"
  input: "training/Adam/vhat_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_9_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_9_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_9_1"
    }
  }
}
node {
  name: "training/Adam/vhat_9_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_9_1"
}
node {
  name: "training/Adam/vhat_9_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_9_1"
  input: "training/Adam/vhat_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_9_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_9_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_10/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_10"
  op: "Fill"
  input: "training/Adam/vhat_10/shape_as_tensor"
  input: "training/Adam/vhat_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_10_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_10_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_10_1"
    }
  }
}
node {
  name: "training/Adam/vhat_10_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_10_1"
}
node {
  name: "training/Adam/vhat_10_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_10_1"
  input: "training/Adam/vhat_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_10_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_10_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_11/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_11"
  op: "Fill"
  input: "training/Adam/vhat_11/shape_as_tensor"
  input: "training/Adam/vhat_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_11_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_11_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_11_1"
    }
  }
}
node {
  name: "training/Adam/vhat_11_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_11_1"
}
node {
  name: "training/Adam/vhat_11_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_11_1"
  input: "training/Adam/vhat_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_11_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_11_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_12/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_12"
  op: "Fill"
  input: "training/Adam/vhat_12/shape_as_tensor"
  input: "training/Adam/vhat_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_12_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_12_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_12_1"
    }
  }
}
node {
  name: "training/Adam/vhat_12_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_12_1"
}
node {
  name: "training/Adam/vhat_12_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_12_1"
  input: "training/Adam/vhat_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_12_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_12_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_13"
  op: "Fill"
  input: "training/Adam/vhat_13/shape_as_tensor"
  input: "training/Adam/vhat_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_13_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_13_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_13_1"
    }
  }
}
node {
  name: "training/Adam/vhat_13_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_13_1"
}
node {
  name: "training/Adam/vhat_13_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_13_1"
  input: "training/Adam/vhat_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_13_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_13_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_14"
  op: "Fill"
  input: "training/Adam/vhat_14/shape_as_tensor"
  input: "training/Adam/vhat_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_14_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_14_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_14_1"
    }
  }
}
node {
  name: "training/Adam/vhat_14_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_14_1"
}
node {
  name: "training/Adam/vhat_14_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_14_1"
  input: "training/Adam/vhat_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_14_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_14_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_15/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_15"
  op: "Fill"
  input: "training/Adam/vhat_15/shape_as_tensor"
  input: "training/Adam/vhat_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_15_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_15_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_15_1"
    }
  }
}
node {
  name: "training/Adam/vhat_15_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_15_1"
}
node {
  name: "training/Adam/vhat_15_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_15_1"
  input: "training/Adam/vhat_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_15_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_15_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_16"
  op: "Fill"
  input: "training/Adam/vhat_16/shape_as_tensor"
  input: "training/Adam/vhat_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_16_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_16_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_16_1"
    }
  }
}
node {
  name: "training/Adam/vhat_16_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_16_1"
}
node {
  name: "training/Adam/vhat_16_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_16_1"
  input: "training/Adam/vhat_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_16_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_16_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_17"
  op: "Fill"
  input: "training/Adam/vhat_17/shape_as_tensor"
  input: "training/Adam/vhat_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_17_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_17_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_17_1"
    }
  }
}
node {
  name: "training/Adam/vhat_17_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_17_1"
}
node {
  name: "training/Adam/vhat_17_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_17_1"
  input: "training/Adam/vhat_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_17_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_17_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_18/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_18"
  op: "Fill"
  input: "training/Adam/vhat_18/shape_as_tensor"
  input: "training/Adam/vhat_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_18_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_18_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_18_1"
    }
  }
}
node {
  name: "training/Adam/vhat_18_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_18_1"
}
node {
  name: "training/Adam/vhat_18_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_18_1"
  input: "training/Adam/vhat_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_18_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_18_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_19"
  op: "Fill"
  input: "training/Adam/vhat_19/shape_as_tensor"
  input: "training/Adam/vhat_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_19_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_19_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_19_1"
    }
  }
}
node {
  name: "training/Adam/vhat_19_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_19_1"
}
node {
  name: "training/Adam/vhat_19_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_19_1"
  input: "training/Adam/vhat_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_19_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_19_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_20"
  op: "Fill"
  input: "training/Adam/vhat_20/shape_as_tensor"
  input: "training/Adam/vhat_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_20_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_20_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_20_1"
    }
  }
}
node {
  name: "training/Adam/vhat_20_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_20_1"
}
node {
  name: "training/Adam/vhat_20_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_20_1"
  input: "training/Adam/vhat_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_20_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_20_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_21/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/vhat_21/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/vhat_21"
  op: "Fill"
  input: "training/Adam/vhat_21/shape_as_tensor"
  input: "training/Adam/vhat_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/vhat_21_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/vhat_21_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/vhat_21_1"
    }
  }
}
node {
  name: "training/Adam/vhat_21_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_21_1"
}
node {
  name: "training/Adam/vhat_21_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_21_1"
  input: "training/Adam/vhat_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/vhat_21_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_21_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_0_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_2"
  input: "training/Adam/mul_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "training/Adam/ReadVariableOp_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/conv2d_1/convolution_grad/Conv2DBackpropFilter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "AddV2"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_0_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_4"
  input: "training/Adam/mul_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_5"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "training/Adam/ReadVariableOp_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/conv2d_1/convolution_grad/Conv2DBackpropFilter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "AddV2"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "AddV2"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_6"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_6"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp"
  op: "AssignVariableOp"
  input: "training/Adam/m_0_1"
  input: "training/Adam/add_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_7"
  op: "ReadVariableOp"
  input: "training/Adam/m_0_1"
  input: "^training/Adam/AssignVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "training/Adam/v_0_1"
  input: "training/Adam/add_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_8"
  op: "ReadVariableOp"
  input: "training/Adam/v_0_1"
  input: "^training/Adam/AssignVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "conv2d_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_9"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  input: "^training/Adam/AssignVariableOp_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_10"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_1_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_10"
  input: "training/Adam/mul_6/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_11"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "training/Adam/ReadVariableOp_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "AddV2"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_12"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_1_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_12"
  input: "training/Adam/mul_8/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_13"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "training/Adam/ReadVariableOp_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "AddV2"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "AddV2"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_14"
  op: "ReadVariableOp"
  input: "conv2d_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_14"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "training/Adam/m_1_1"
  input: "training/Adam/add_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_15"
  op: "ReadVariableOp"
  input: "training/Adam/m_1_1"
  input: "^training/Adam/AssignVariableOp_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "training/Adam/v_1_1"
  input: "training/Adam/add_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_16"
  op: "ReadVariableOp"
  input: "training/Adam/v_1_1"
  input: "^training/Adam/AssignVariableOp_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "conv2d_1/bias"
  input: "training/Adam/sub_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_17"
  op: "ReadVariableOp"
  input: "conv2d_1/bias"
  input: "^training/Adam/AssignVariableOp_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_18"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_2_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_18"
  input: "training/Adam/mul_11/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_19"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "training/Adam/ReadVariableOp_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/batch_normalization_1/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "AddV2"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_20"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_2_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_20"
  input: "training/Adam/mul_13/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_21"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "training/Adam/ReadVariableOp_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/batch_normalization_1/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "AddV2"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "AddV2"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_22"
  op: "ReadVariableOp"
  input: "batch_normalization_1/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_22"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "training/Adam/m_2_1"
  input: "training/Adam/add_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_23"
  op: "ReadVariableOp"
  input: "training/Adam/m_2_1"
  input: "^training/Adam/AssignVariableOp_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "training/Adam/v_2_1"
  input: "training/Adam/add_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_24"
  op: "ReadVariableOp"
  input: "training/Adam/v_2_1"
  input: "^training/Adam/AssignVariableOp_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "batch_normalization_1/gamma"
  input: "training/Adam/sub_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_25"
  op: "ReadVariableOp"
  input: "batch_normalization_1/gamma"
  input: "^training/Adam/AssignVariableOp_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_26"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_16/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_3_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_26"
  input: "training/Adam/mul_16/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_27"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "training/Adam/ReadVariableOp_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/batch_normalization_1/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "AddV2"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_28"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_3_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_28"
  input: "training/Adam/mul_18/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_29"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "training/Adam/ReadVariableOp_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/batch_normalization_1/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "AddV2"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "AddV2"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_30"
  op: "ReadVariableOp"
  input: "batch_normalization_1/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_30"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adam/m_3_1"
  input: "training/Adam/add_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_31"
  op: "ReadVariableOp"
  input: "training/Adam/m_3_1"
  input: "^training/Adam/AssignVariableOp_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adam/v_3_1"
  input: "training/Adam/add_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_32"
  op: "ReadVariableOp"
  input: "training/Adam/v_3_1"
  input: "^training/Adam/AssignVariableOp_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "batch_normalization_1/beta"
  input: "training/Adam/sub_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_33"
  op: "ReadVariableOp"
  input: "batch_normalization_1/beta"
  input: "^training/Adam/AssignVariableOp_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_34"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_21/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_4_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_34"
  input: "training/Adam/mul_21/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_35"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "training/Adam/ReadVariableOp_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/conv2d_2/convolution_grad/Conv2DBackpropFilter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "AddV2"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_36"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_4_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_36"
  input: "training/Adam/mul_23/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_37"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "training/Adam/ReadVariableOp_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/conv2d_2/convolution_grad/Conv2DBackpropFilter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "AddV2"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "AddV2"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_38"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_38"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adam/m_4_1"
  input: "training/Adam/add_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_39"
  op: "ReadVariableOp"
  input: "training/Adam/m_4_1"
  input: "^training/Adam/AssignVariableOp_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adam/v_4_1"
  input: "training/Adam/add_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_40"
  op: "ReadVariableOp"
  input: "training/Adam/v_4_1"
  input: "^training/Adam/AssignVariableOp_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "conv2d_2/kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_41"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  input: "^training/Adam/AssignVariableOp_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_42"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_26/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_5_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_42"
  input: "training/Adam/mul_26/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_43"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "training/Adam/ReadVariableOp_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/conv2d_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "AddV2"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_44"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_5_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_44"
  input: "training/Adam/mul_28/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_45"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "training/Adam/ReadVariableOp_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/conv2d_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "AddV2"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "AddV2"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_46"
  op: "ReadVariableOp"
  input: "conv2d_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_46"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Adam/m_5_1"
  input: "training/Adam/add_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_47"
  op: "ReadVariableOp"
  input: "training/Adam/m_5_1"
  input: "^training/Adam/AssignVariableOp_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Adam/v_5_1"
  input: "training/Adam/add_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_48"
  op: "ReadVariableOp"
  input: "training/Adam/v_5_1"
  input: "^training/Adam/AssignVariableOp_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "conv2d_2/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_49"
  op: "ReadVariableOp"
  input: "conv2d_2/bias"
  input: "^training/Adam/AssignVariableOp_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_50"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_31/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_6_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_50"
  input: "training/Adam/mul_31/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_51"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "training/Adam/ReadVariableOp_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/batch_normalization_2/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "AddV2"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_52"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_6_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_52"
  input: "training/Adam/mul_33/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_53"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "training/Adam/ReadVariableOp_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/batch_normalization_2/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "AddV2"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "AddV2"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_54"
  op: "ReadVariableOp"
  input: "batch_normalization_2/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_54"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Adam/m_6_1"
  input: "training/Adam/add_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_55"
  op: "ReadVariableOp"
  input: "training/Adam/m_6_1"
  input: "^training/Adam/AssignVariableOp_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Adam/v_6_1"
  input: "training/Adam/add_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_56"
  op: "ReadVariableOp"
  input: "training/Adam/v_6_1"
  input: "^training/Adam/AssignVariableOp_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "batch_normalization_2/gamma"
  input: "training/Adam/sub_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_57"
  op: "ReadVariableOp"
  input: "batch_normalization_2/gamma"
  input: "^training/Adam/AssignVariableOp_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_58"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_36/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_7_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_58"
  input: "training/Adam/mul_36/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_59"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "training/Adam/ReadVariableOp_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/batch_normalization_2/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "AddV2"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_60"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_7_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_60"
  input: "training/Adam/mul_38/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_61"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "training/Adam/ReadVariableOp_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/batch_normalization_2/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "AddV2"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "AddV2"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_62"
  op: "ReadVariableOp"
  input: "batch_normalization_2/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_62"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Adam/m_7_1"
  input: "training/Adam/add_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_63"
  op: "ReadVariableOp"
  input: "training/Adam/m_7_1"
  input: "^training/Adam/AssignVariableOp_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "training/Adam/v_7_1"
  input: "training/Adam/add_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_64"
  op: "ReadVariableOp"
  input: "training/Adam/v_7_1"
  input: "^training/Adam/AssignVariableOp_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "batch_normalization_2/beta"
  input: "training/Adam/sub_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_65"
  op: "ReadVariableOp"
  input: "batch_normalization_2/beta"
  input: "^training/Adam/AssignVariableOp_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_66"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_41/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_8_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_66"
  input: "training/Adam/mul_41/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_67"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "training/Adam/ReadVariableOp_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/conv2d_3/convolution_grad/Conv2DBackpropFilter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "AddV2"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_68"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_8_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_68"
  input: "training/Adam/mul_43/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_69"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "training/Adam/ReadVariableOp_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/conv2d_3/convolution_grad/Conv2DBackpropFilter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "AddV2"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "AddV2"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_70"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_70"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "training/Adam/m_8_1"
  input: "training/Adam/add_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_71"
  op: "ReadVariableOp"
  input: "training/Adam/m_8_1"
  input: "^training/Adam/AssignVariableOp_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "training/Adam/v_8_1"
  input: "training/Adam/add_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_72"
  op: "ReadVariableOp"
  input: "training/Adam/v_8_1"
  input: "^training/Adam/AssignVariableOp_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "conv2d_3/kernel"
  input: "training/Adam/sub_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_73"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  input: "^training/Adam/AssignVariableOp_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_74"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_46/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_9_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_74"
  input: "training/Adam/mul_46/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_75"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "training/Adam/ReadVariableOp_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/conv2d_3/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "AddV2"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_76"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_9_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_76"
  input: "training/Adam/mul_48/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_77"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "training/Adam/ReadVariableOp_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/conv2d_3/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "AddV2"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "AddV2"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_78"
  op: "ReadVariableOp"
  input: "conv2d_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_78"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "training/Adam/m_9_1"
  input: "training/Adam/add_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_79"
  op: "ReadVariableOp"
  input: "training/Adam/m_9_1"
  input: "^training/Adam/AssignVariableOp_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "training/Adam/v_9_1"
  input: "training/Adam/add_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_80"
  op: "ReadVariableOp"
  input: "training/Adam/v_9_1"
  input: "^training/Adam/AssignVariableOp_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "conv2d_3/bias"
  input: "training/Adam/sub_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_81"
  op: "ReadVariableOp"
  input: "conv2d_3/bias"
  input: "^training/Adam/AssignVariableOp_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_82"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_51/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_10_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_82"
  input: "training/Adam/mul_51/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_83"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "training/Adam/ReadVariableOp_83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/batch_normalization_3/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "AddV2"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_84"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_10_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_84"
  input: "training/Adam/mul_53/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_85"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "training/Adam/ReadVariableOp_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/batch_normalization_3/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "AddV2"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "AddV2"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_86"
  op: "ReadVariableOp"
  input: "batch_normalization_3/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_86"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "training/Adam/m_10_1"
  input: "training/Adam/add_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_87"
  op: "ReadVariableOp"
  input: "training/Adam/m_10_1"
  input: "^training/Adam/AssignVariableOp_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "training/Adam/v_10_1"
  input: "training/Adam/add_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_88"
  op: "ReadVariableOp"
  input: "training/Adam/v_10_1"
  input: "^training/Adam/AssignVariableOp_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "batch_normalization_3/gamma"
  input: "training/Adam/sub_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_89"
  op: "ReadVariableOp"
  input: "batch_normalization_3/gamma"
  input: "^training/Adam/AssignVariableOp_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_90"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_56/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_11_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_90"
  input: "training/Adam/mul_56/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_91"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "training/Adam/ReadVariableOp_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/batch_normalization_3/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "AddV2"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_92"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_11_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_92"
  input: "training/Adam/mul_58/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_93"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "training/Adam/ReadVariableOp_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/batch_normalization_3/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "AddV2"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "AddV2"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_94"
  op: "ReadVariableOp"
  input: "batch_normalization_3/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_94"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "training/Adam/m_11_1"
  input: "training/Adam/add_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_95"
  op: "ReadVariableOp"
  input: "training/Adam/m_11_1"
  input: "^training/Adam/AssignVariableOp_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "training/Adam/v_11_1"
  input: "training/Adam/add_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_96"
  op: "ReadVariableOp"
  input: "training/Adam/v_11_1"
  input: "^training/Adam/AssignVariableOp_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "batch_normalization_3/beta"
  input: "training/Adam/sub_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_97"
  op: "ReadVariableOp"
  input: "batch_normalization_3/beta"
  input: "^training/Adam/AssignVariableOp_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_98"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_61/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_12_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_98"
  input: "training/Adam/mul_61/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_99"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "training/Adam/ReadVariableOp_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "AddV2"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_100"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_12_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_100"
  input: "training/Adam/mul_63/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_101"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "training/Adam/ReadVariableOp_101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "AddV2"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_28"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "AddV2"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_102"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_102"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "training/Adam/m_12_1"
  input: "training/Adam/add_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_103"
  op: "ReadVariableOp"
  input: "training/Adam/m_12_1"
  input: "^training/Adam/AssignVariableOp_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "training/Adam/v_12_1"
  input: "training/Adam/add_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_104"
  op: "ReadVariableOp"
  input: "training/Adam/v_12_1"
  input: "^training/Adam/AssignVariableOp_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "training/Adam/sub_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_105"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  input: "^training/Adam/AssignVariableOp_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_106"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_66/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_13_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_66"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_106"
  input: "training/Adam/mul_66/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_107"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_41/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_41"
  op: "Sub"
  input: "training/Adam/sub_41/x"
  input: "training/Adam/ReadVariableOp_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_67"
  op: "Mul"
  input: "training/Adam/sub_41"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_40"
  op: "AddV2"
  input: "training/Adam/mul_66"
  input: "training/Adam/mul_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_108"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_68/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_13_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_68"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_108"
  input: "training/Adam/mul_68/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_109"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_42/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_42"
  op: "Sub"
  input: "training/Adam/sub_42/x"
  input: "training/Adam/ReadVariableOp_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_13"
  op: "Square"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_69"
  op: "Mul"
  input: "training/Adam/sub_42"
  input: "training/Adam/Square_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_41"
  op: "AddV2"
  input: "training/Adam/mul_68"
  input: "training/Adam/mul_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_70"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_29"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_30"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14/Minimum"
  op: "Minimum"
  input: "training/Adam/add_41"
  input: "training/Adam/Const_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14"
  op: "Maximum"
  input: "training/Adam/clip_by_value_14/Minimum"
  input: "training/Adam/Const_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_14"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_42/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_42"
  op: "AddV2"
  input: "training/Adam/Sqrt_14"
  input: "training/Adam/add_42/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_14"
  op: "RealDiv"
  input: "training/Adam/mul_70"
  input: "training/Adam/add_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_110"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_43"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_110"
  input: "training/Adam/truediv_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "training/Adam/m_13_1"
  input: "training/Adam/add_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_111"
  op: "ReadVariableOp"
  input: "training/Adam/m_13_1"
  input: "^training/Adam/AssignVariableOp_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "training/Adam/v_13_1"
  input: "training/Adam/add_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_112"
  op: "ReadVariableOp"
  input: "training/Adam/v_13_1"
  input: "^training/Adam/AssignVariableOp_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "training/Adam/sub_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_113"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  input: "^training/Adam/AssignVariableOp_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_114"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_71/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_14_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_71"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_114"
  input: "training/Adam/mul_71/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_115"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_44/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_44"
  op: "Sub"
  input: "training/Adam/sub_44/x"
  input: "training/Adam/ReadVariableOp_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_72"
  op: "Mul"
  input: "training/Adam/sub_44"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_43"
  op: "AddV2"
  input: "training/Adam/mul_71"
  input: "training/Adam/mul_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_116"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_73/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_14_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_73"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_116"
  input: "training/Adam/mul_73/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_117"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_45/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_45"
  op: "Sub"
  input: "training/Adam/sub_45/x"
  input: "training/Adam/ReadVariableOp_117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_14"
  op: "Square"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_74"
  op: "Mul"
  input: "training/Adam/sub_45"
  input: "training/Adam/Square_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_44"
  op: "AddV2"
  input: "training/Adam/mul_73"
  input: "training/Adam/mul_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_75"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_31"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_32"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15/Minimum"
  op: "Minimum"
  input: "training/Adam/add_44"
  input: "training/Adam/Const_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15"
  op: "Maximum"
  input: "training/Adam/clip_by_value_15/Minimum"
  input: "training/Adam/Const_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_15"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_45/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_45"
  op: "AddV2"
  input: "training/Adam/Sqrt_15"
  input: "training/Adam/add_45/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_15"
  op: "RealDiv"
  input: "training/Adam/mul_75"
  input: "training/Adam/add_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_118"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_46"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_118"
  input: "training/Adam/truediv_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "training/Adam/m_14_1"
  input: "training/Adam/add_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_119"
  op: "ReadVariableOp"
  input: "training/Adam/m_14_1"
  input: "^training/Adam/AssignVariableOp_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_43"
  op: "AssignVariableOp"
  input: "training/Adam/v_14_1"
  input: "training/Adam/add_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_120"
  op: "ReadVariableOp"
  input: "training/Adam/v_14_1"
  input: "^training/Adam/AssignVariableOp_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_44"
  op: "AssignVariableOp"
  input: "dense_2/kernel"
  input: "training/Adam/sub_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_121"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  input: "^training/Adam/AssignVariableOp_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_122"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_76/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_15_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_76"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_122"
  input: "training/Adam/mul_76/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_123"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_47/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_47"
  op: "Sub"
  input: "training/Adam/sub_47/x"
  input: "training/Adam/ReadVariableOp_123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_77"
  op: "Mul"
  input: "training/Adam/sub_47"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_46"
  op: "AddV2"
  input: "training/Adam/mul_76"
  input: "training/Adam/mul_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_124"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_78/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_15_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_78"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_124"
  input: "training/Adam/mul_78/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_125"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_48/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_48"
  op: "Sub"
  input: "training/Adam/sub_48/x"
  input: "training/Adam/ReadVariableOp_125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_15"
  op: "Square"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_79"
  op: "Mul"
  input: "training/Adam/sub_48"
  input: "training/Adam/Square_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_47"
  op: "AddV2"
  input: "training/Adam/mul_78"
  input: "training/Adam/mul_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_80"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_33"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_34"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16/Minimum"
  op: "Minimum"
  input: "training/Adam/add_47"
  input: "training/Adam/Const_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16"
  op: "Maximum"
  input: "training/Adam/clip_by_value_16/Minimum"
  input: "training/Adam/Const_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_16"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_48/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_48"
  op: "AddV2"
  input: "training/Adam/Sqrt_16"
  input: "training/Adam/add_48/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_16"
  op: "RealDiv"
  input: "training/Adam/mul_80"
  input: "training/Adam/add_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_126"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_49"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_126"
  input: "training/Adam/truediv_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_45"
  op: "AssignVariableOp"
  input: "training/Adam/m_15_1"
  input: "training/Adam/add_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_127"
  op: "ReadVariableOp"
  input: "training/Adam/m_15_1"
  input: "^training/Adam/AssignVariableOp_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_46"
  op: "AssignVariableOp"
  input: "training/Adam/v_15_1"
  input: "training/Adam/add_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_128"
  op: "ReadVariableOp"
  input: "training/Adam/v_15_1"
  input: "^training/Adam/AssignVariableOp_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_47"
  op: "AssignVariableOp"
  input: "dense_2/bias"
  input: "training/Adam/sub_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_129"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  input: "^training/Adam/AssignVariableOp_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_130"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_81/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_16_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_81"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_130"
  input: "training/Adam/mul_81/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_131"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_50/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_50"
  op: "Sub"
  input: "training/Adam/sub_50/x"
  input: "training/Adam/ReadVariableOp_131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_82"
  op: "Mul"
  input: "training/Adam/sub_50"
  input: "training/Adam/gradients/dense_5/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_49"
  op: "AddV2"
  input: "training/Adam/mul_81"
  input: "training/Adam/mul_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_132"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_83/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_16_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_83"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_132"
  input: "training/Adam/mul_83/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_133"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_51/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_51"
  op: "Sub"
  input: "training/Adam/sub_51/x"
  input: "training/Adam/ReadVariableOp_133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_16"
  op: "Square"
  input: "training/Adam/gradients/dense_5/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_84"
  op: "Mul"
  input: "training/Adam/sub_51"
  input: "training/Adam/Square_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_50"
  op: "AddV2"
  input: "training/Adam/mul_83"
  input: "training/Adam/mul_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_85"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_35"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_36"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17/Minimum"
  op: "Minimum"
  input: "training/Adam/add_50"
  input: "training/Adam/Const_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17"
  op: "Maximum"
  input: "training/Adam/clip_by_value_17/Minimum"
  input: "training/Adam/Const_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_17"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_51/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_51"
  op: "AddV2"
  input: "training/Adam/Sqrt_17"
  input: "training/Adam/add_51/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_17"
  op: "RealDiv"
  input: "training/Adam/mul_85"
  input: "training/Adam/add_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_134"
  op: "ReadVariableOp"
  input: "dense_5/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_52"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_134"
  input: "training/Adam/truediv_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_48"
  op: "AssignVariableOp"
  input: "training/Adam/m_16_1"
  input: "training/Adam/add_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_135"
  op: "ReadVariableOp"
  input: "training/Adam/m_16_1"
  input: "^training/Adam/AssignVariableOp_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_49"
  op: "AssignVariableOp"
  input: "training/Adam/v_16_1"
  input: "training/Adam/add_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_136"
  op: "ReadVariableOp"
  input: "training/Adam/v_16_1"
  input: "^training/Adam/AssignVariableOp_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_50"
  op: "AssignVariableOp"
  input: "dense_5/kernel"
  input: "training/Adam/sub_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_137"
  op: "ReadVariableOp"
  input: "dense_5/kernel"
  input: "^training/Adam/AssignVariableOp_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_138"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_86/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_17_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_86"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_138"
  input: "training/Adam/mul_86/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_139"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_53/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_53"
  op: "Sub"
  input: "training/Adam/sub_53/x"
  input: "training/Adam/ReadVariableOp_139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_87"
  op: "Mul"
  input: "training/Adam/sub_53"
  input: "training/Adam/gradients/dense_5/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_52"
  op: "AddV2"
  input: "training/Adam/mul_86"
  input: "training/Adam/mul_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_140"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_88/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_17_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_88"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_140"
  input: "training/Adam/mul_88/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_141"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_54/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_54"
  op: "Sub"
  input: "training/Adam/sub_54/x"
  input: "training/Adam/ReadVariableOp_141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_17"
  op: "Square"
  input: "training/Adam/gradients/dense_5/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_89"
  op: "Mul"
  input: "training/Adam/sub_54"
  input: "training/Adam/Square_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_53"
  op: "AddV2"
  input: "training/Adam/mul_88"
  input: "training/Adam/mul_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_90"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_37"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_38"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18/Minimum"
  op: "Minimum"
  input: "training/Adam/add_53"
  input: "training/Adam/Const_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18"
  op: "Maximum"
  input: "training/Adam/clip_by_value_18/Minimum"
  input: "training/Adam/Const_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_18"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_54/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_54"
  op: "AddV2"
  input: "training/Adam/Sqrt_18"
  input: "training/Adam/add_54/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_18"
  op: "RealDiv"
  input: "training/Adam/mul_90"
  input: "training/Adam/add_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_142"
  op: "ReadVariableOp"
  input: "dense_5/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_55"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_142"
  input: "training/Adam/truediv_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_51"
  op: "AssignVariableOp"
  input: "training/Adam/m_17_1"
  input: "training/Adam/add_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_143"
  op: "ReadVariableOp"
  input: "training/Adam/m_17_1"
  input: "^training/Adam/AssignVariableOp_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_52"
  op: "AssignVariableOp"
  input: "training/Adam/v_17_1"
  input: "training/Adam/add_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_144"
  op: "ReadVariableOp"
  input: "training/Adam/v_17_1"
  input: "^training/Adam/AssignVariableOp_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_53"
  op: "AssignVariableOp"
  input: "dense_5/bias"
  input: "training/Adam/sub_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_145"
  op: "ReadVariableOp"
  input: "dense_5/bias"
  input: "^training/Adam/AssignVariableOp_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_146"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_91/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_18_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_91"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_146"
  input: "training/Adam/mul_91/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_147"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_56/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_56"
  op: "Sub"
  input: "training/Adam/sub_56/x"
  input: "training/Adam/ReadVariableOp_147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_92"
  op: "Mul"
  input: "training/Adam/sub_56"
  input: "training/Adam/gradients/dense_3/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_55"
  op: "AddV2"
  input: "training/Adam/mul_91"
  input: "training/Adam/mul_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_148"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_93/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_18_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_93"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_148"
  input: "training/Adam/mul_93/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_149"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_57/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_57"
  op: "Sub"
  input: "training/Adam/sub_57/x"
  input: "training/Adam/ReadVariableOp_149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_18"
  op: "Square"
  input: "training/Adam/gradients/dense_3/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_94"
  op: "Mul"
  input: "training/Adam/sub_57"
  input: "training/Adam/Square_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_56"
  op: "AddV2"
  input: "training/Adam/mul_93"
  input: "training/Adam/mul_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_95"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_39"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_40"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19/Minimum"
  op: "Minimum"
  input: "training/Adam/add_56"
  input: "training/Adam/Const_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19"
  op: "Maximum"
  input: "training/Adam/clip_by_value_19/Minimum"
  input: "training/Adam/Const_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_19"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_57/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_57"
  op: "AddV2"
  input: "training/Adam/Sqrt_19"
  input: "training/Adam/add_57/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_19"
  op: "RealDiv"
  input: "training/Adam/mul_95"
  input: "training/Adam/add_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_150"
  op: "ReadVariableOp"
  input: "dense_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_58"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_150"
  input: "training/Adam/truediv_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_54"
  op: "AssignVariableOp"
  input: "training/Adam/m_18_1"
  input: "training/Adam/add_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_151"
  op: "ReadVariableOp"
  input: "training/Adam/m_18_1"
  input: "^training/Adam/AssignVariableOp_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_55"
  op: "AssignVariableOp"
  input: "training/Adam/v_18_1"
  input: "training/Adam/add_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_152"
  op: "ReadVariableOp"
  input: "training/Adam/v_18_1"
  input: "^training/Adam/AssignVariableOp_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_56"
  op: "AssignVariableOp"
  input: "dense_3/kernel"
  input: "training/Adam/sub_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_153"
  op: "ReadVariableOp"
  input: "dense_3/kernel"
  input: "^training/Adam/AssignVariableOp_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_154"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_96/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_19_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_96"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_154"
  input: "training/Adam/mul_96/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_155"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_59/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_59"
  op: "Sub"
  input: "training/Adam/sub_59/x"
  input: "training/Adam/ReadVariableOp_155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_97"
  op: "Mul"
  input: "training/Adam/sub_59"
  input: "training/Adam/gradients/dense_3/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_58"
  op: "AddV2"
  input: "training/Adam/mul_96"
  input: "training/Adam/mul_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_156"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_98/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_19_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_98"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_156"
  input: "training/Adam/mul_98/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_157"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_60/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_60"
  op: "Sub"
  input: "training/Adam/sub_60/x"
  input: "training/Adam/ReadVariableOp_157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_19"
  op: "Square"
  input: "training/Adam/gradients/dense_3/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_99"
  op: "Mul"
  input: "training/Adam/sub_60"
  input: "training/Adam/Square_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_59"
  op: "AddV2"
  input: "training/Adam/mul_98"
  input: "training/Adam/mul_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_100"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_41"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_42"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20/Minimum"
  op: "Minimum"
  input: "training/Adam/add_59"
  input: "training/Adam/Const_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20"
  op: "Maximum"
  input: "training/Adam/clip_by_value_20/Minimum"
  input: "training/Adam/Const_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_20"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_60/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_60"
  op: "AddV2"
  input: "training/Adam/Sqrt_20"
  input: "training/Adam/add_60/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_20"
  op: "RealDiv"
  input: "training/Adam/mul_100"
  input: "training/Adam/add_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_158"
  op: "ReadVariableOp"
  input: "dense_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_61"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_158"
  input: "training/Adam/truediv_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_57"
  op: "AssignVariableOp"
  input: "training/Adam/m_19_1"
  input: "training/Adam/add_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_159"
  op: "ReadVariableOp"
  input: "training/Adam/m_19_1"
  input: "^training/Adam/AssignVariableOp_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_58"
  op: "AssignVariableOp"
  input: "training/Adam/v_19_1"
  input: "training/Adam/add_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_160"
  op: "ReadVariableOp"
  input: "training/Adam/v_19_1"
  input: "^training/Adam/AssignVariableOp_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_59"
  op: "AssignVariableOp"
  input: "dense_3/bias"
  input: "training/Adam/sub_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_161"
  op: "ReadVariableOp"
  input: "dense_3/bias"
  input: "^training/Adam/AssignVariableOp_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_162"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_101/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_20_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_101"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_162"
  input: "training/Adam/mul_101/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_163"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_62/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_62"
  op: "Sub"
  input: "training/Adam/sub_62/x"
  input: "training/Adam/ReadVariableOp_163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_102"
  op: "Mul"
  input: "training/Adam/sub_62"
  input: "training/Adam/gradients/dense_4/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_61"
  op: "AddV2"
  input: "training/Adam/mul_101"
  input: "training/Adam/mul_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_164"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_103/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_20_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_103"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_164"
  input: "training/Adam/mul_103/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_165"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_63/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_63"
  op: "Sub"
  input: "training/Adam/sub_63/x"
  input: "training/Adam/ReadVariableOp_165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_20"
  op: "Square"
  input: "training/Adam/gradients/dense_4/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_104"
  op: "Mul"
  input: "training/Adam/sub_63"
  input: "training/Adam/Square_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_62"
  op: "AddV2"
  input: "training/Adam/mul_103"
  input: "training/Adam/mul_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_105"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_43"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_44"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21/Minimum"
  op: "Minimum"
  input: "training/Adam/add_62"
  input: "training/Adam/Const_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21"
  op: "Maximum"
  input: "training/Adam/clip_by_value_21/Minimum"
  input: "training/Adam/Const_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_21"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_63/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_63"
  op: "AddV2"
  input: "training/Adam/Sqrt_21"
  input: "training/Adam/add_63/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_21"
  op: "RealDiv"
  input: "training/Adam/mul_105"
  input: "training/Adam/add_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_166"
  op: "ReadVariableOp"
  input: "dense_4/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_64"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_166"
  input: "training/Adam/truediv_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_60"
  op: "AssignVariableOp"
  input: "training/Adam/m_20_1"
  input: "training/Adam/add_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_167"
  op: "ReadVariableOp"
  input: "training/Adam/m_20_1"
  input: "^training/Adam/AssignVariableOp_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_61"
  op: "AssignVariableOp"
  input: "training/Adam/v_20_1"
  input: "training/Adam/add_62"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_168"
  op: "ReadVariableOp"
  input: "training/Adam/v_20_1"
  input: "^training/Adam/AssignVariableOp_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_62"
  op: "AssignVariableOp"
  input: "dense_4/kernel"
  input: "training/Adam/sub_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_169"
  op: "ReadVariableOp"
  input: "dense_4/kernel"
  input: "^training/Adam/AssignVariableOp_62"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_170"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_106/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/m_21_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_106"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_170"
  input: "training/Adam/mul_106/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_171"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_65/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_65"
  op: "Sub"
  input: "training/Adam/sub_65/x"
  input: "training/Adam/ReadVariableOp_171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_107"
  op: "Mul"
  input: "training/Adam/sub_65"
  input: "training/Adam/gradients/dense_4/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_64"
  op: "AddV2"
  input: "training/Adam/mul_106"
  input: "training/Adam/mul_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_172"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_108/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/v_21_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_108"
  op: "Mul"
  input: "training/Adam/ReadVariableOp_172"
  input: "training/Adam/mul_108/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_173"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_66/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_66"
  op: "Sub"
  input: "training/Adam/sub_66/x"
  input: "training/Adam/ReadVariableOp_173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_21"
  op: "Square"
  input: "training/Adam/gradients/dense_4/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_109"
  op: "Mul"
  input: "training/Adam/sub_66"
  input: "training/Adam/Square_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_65"
  op: "AddV2"
  input: "training/Adam/mul_108"
  input: "training/Adam/mul_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_110"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_45"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_46"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_22/Minimum"
  op: "Minimum"
  input: "training/Adam/add_65"
  input: "training/Adam/Const_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_22"
  op: "Maximum"
  input: "training/Adam/clip_by_value_22/Minimum"
  input: "training/Adam/Const_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_22"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_66/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_66"
  op: "AddV2"
  input: "training/Adam/Sqrt_22"
  input: "training/Adam/add_66/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_22"
  op: "RealDiv"
  input: "training/Adam/mul_110"
  input: "training/Adam/add_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_174"
  op: "ReadVariableOp"
  input: "dense_4/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_67"
  op: "Sub"
  input: "training/Adam/ReadVariableOp_174"
  input: "training/Adam/truediv_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_63"
  op: "AssignVariableOp"
  input: "training/Adam/m_21_1"
  input: "training/Adam/add_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_175"
  op: "ReadVariableOp"
  input: "training/Adam/m_21_1"
  input: "^training/Adam/AssignVariableOp_63"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_64"
  op: "AssignVariableOp"
  input: "training/Adam/v_21_1"
  input: "training/Adam/add_65"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_176"
  op: "ReadVariableOp"
  input: "training/Adam/v_21_1"
  input: "^training/Adam/AssignVariableOp_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/AssignVariableOp_65"
  op: "AssignVariableOp"
  input: "dense_4/bias"
  input: "training/Adam/sub_67"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp_177"
  op: "ReadVariableOp"
  input: "dense_4/bias"
  input: "^training/Adam/AssignVariableOp_65"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count_3"
}
node {
  name: "training/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_17_1"
}
node {
  name: "training/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_14_1"
}
node {
  name: "training/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "total_2"
}
node {
  name: "training/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_1_1"
}
node {
  name: "training/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_3_1"
}
node {
  name: "training/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_10_1"
}
node {
  name: "training/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_8_1"
}
node {
  name: "training/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_21_1"
}
node {
  name: "training/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_6_1"
}
node {
  name: "training/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "total_5"
}
node {
  name: "training/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_8_1"
}
node {
  name: "training/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_8_1"
}
node {
  name: "training/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_18_1"
}
node {
  name: "training/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_2_1"
}
node {
  name: "training/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_18_1"
}
node {
  name: "training/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_10_1"
}
node {
  name: "training/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_9_1"
}
node {
  name: "training/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_0_1"
}
node {
  name: "training/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_13_1"
}
node {
  name: "training/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_4_1"
}
node {
  name: "training/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "Adam/learning_rate"
}
node {
  name: "training/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "count_2"
}
node {
  name: "training/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_18_1"
}
node {
  name: "training/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_2_1"
}
node {
  name: "training/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_9_1"
}
node {
  name: "training/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_1_1"
}
node {
  name: "training/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_15_1"
}
node {
  name: "training/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_13_1"
}
node {
  name: "training/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_20_1"
}
node {
  name: "training/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_15_1"
}
node {
  name: "training/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "total_3"
}
node {
  name: "training/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_13_1"
}
node {
  name: "training/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_17_1"
}
node {
  name: "training/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_5_1"
}
node {
  name: "training/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_16_1"
}
node {
  name: "training/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_3_1"
}
node {
  name: "training/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "total_1"
}
node {
  name: "training/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_0_1"
}
node {
  name: "training/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "count_4"
}
node {
  name: "training/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_7_1"
}
node {
  name: "training/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_20_1"
}
node {
  name: "training/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_3_1"
}
node {
  name: "training/VarIsInitializedOp_43"
  op: "VarIsInitializedOp"
  input: "count"
}
node {
  name: "training/VarIsInitializedOp_44"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_5_1"
}
node {
  name: "training/VarIsInitializedOp_45"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_19_1"
}
node {
  name: "training/VarIsInitializedOp_46"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_12_1"
}
node {
  name: "training/VarIsInitializedOp_47"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_9_1"
}
node {
  name: "training/VarIsInitializedOp_48"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_11_1"
}
node {
  name: "training/VarIsInitializedOp_49"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_1_1"
}
node {
  name: "training/VarIsInitializedOp_50"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_11_1"
}
node {
  name: "training/VarIsInitializedOp_51"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_12_1"
}
node {
  name: "training/VarIsInitializedOp_52"
  op: "VarIsInitializedOp"
  input: "Adam/beta_1"
}
node {
  name: "training/VarIsInitializedOp_53"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_2_1"
}
node {
  name: "training/VarIsInitializedOp_54"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_15_1"
}
node {
  name: "training/VarIsInitializedOp_55"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_14_1"
}
node {
  name: "training/VarIsInitializedOp_56"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_16_1"
}
node {
  name: "training/VarIsInitializedOp_57"
  op: "VarIsInitializedOp"
  input: "Adam/decay"
}
node {
  name: "training/VarIsInitializedOp_58"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_19_1"
}
node {
  name: "training/VarIsInitializedOp_59"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_4_1"
}
node {
  name: "training/VarIsInitializedOp_60"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_21_1"
}
node {
  name: "training/VarIsInitializedOp_61"
  op: "VarIsInitializedOp"
  input: "count_1"
}
node {
  name: "training/VarIsInitializedOp_62"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_17_1"
}
node {
  name: "training/VarIsInitializedOp_63"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_7_1"
}
node {
  name: "training/VarIsInitializedOp_64"
  op: "VarIsInitializedOp"
  input: "Adam/iterations"
}
node {
  name: "training/VarIsInitializedOp_65"
  op: "VarIsInitializedOp"
  input: "count_5"
}
node {
  name: "training/VarIsInitializedOp_66"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_21_1"
}
node {
  name: "training/VarIsInitializedOp_67"
  op: "VarIsInitializedOp"
  input: "Adam/beta_2"
}
node {
  name: "training/VarIsInitializedOp_68"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_20_1"
}
node {
  name: "training/VarIsInitializedOp_69"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_5_1"
}
node {
  name: "training/VarIsInitializedOp_70"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_16_1"
}
node {
  name: "training/VarIsInitializedOp_71"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_10_1"
}
node {
  name: "training/VarIsInitializedOp_72"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_0_1"
}
node {
  name: "training/VarIsInitializedOp_73"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_14_1"
}
node {
  name: "training/VarIsInitializedOp_74"
  op: "VarIsInitializedOp"
  input: "total"
}
node {
  name: "training/VarIsInitializedOp_75"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_6_1"
}
node {
  name: "training/VarIsInitializedOp_76"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_6_1"
}
node {
  name: "training/VarIsInitializedOp_77"
  op: "VarIsInitializedOp"
  input: "total_4"
}
node {
  name: "training/VarIsInitializedOp_78"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_7_1"
}
node {
  name: "training/VarIsInitializedOp_79"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_12_1"
}
node {
  name: "training/VarIsInitializedOp_80"
  op: "VarIsInitializedOp"
  input: "training/Adam/vhat_4_1"
}
node {
  name: "training/VarIsInitializedOp_81"
  op: "VarIsInitializedOp"
  input: "training/Adam/m_19_1"
}
node {
  name: "training/VarIsInitializedOp_82"
  op: "VarIsInitializedOp"
  input: "training/Adam/v_11_1"
}
node {
  name: "training/init"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/learning_rate/Assign"
  input: "^count/Assign"
  input: "^count_1/Assign"
  input: "^count_2/Assign"
  input: "^count_3/Assign"
  input: "^count_4/Assign"
  input: "^count_5/Assign"
  input: "^total/Assign"
  input: "^total_1/Assign"
  input: "^total_2/Assign"
  input: "^total_3/Assign"
  input: "^total_4/Assign"
  input: "^total_5/Assign"
  input: "^training/Adam/m_0_1/Assign"
  input: "^training/Adam/m_10_1/Assign"
  input: "^training/Adam/m_11_1/Assign"
  input: "^training/Adam/m_12_1/Assign"
  input: "^training/Adam/m_13_1/Assign"
  input: "^training/Adam/m_14_1/Assign"
  input: "^training/Adam/m_15_1/Assign"
  input: "^training/Adam/m_16_1/Assign"
  input: "^training/Adam/m_17_1/Assign"
  input: "^training/Adam/m_18_1/Assign"
  input: "^training/Adam/m_19_1/Assign"
  input: "^training/Adam/m_1_1/Assign"
  input: "^training/Adam/m_20_1/Assign"
  input: "^training/Adam/m_21_1/Assign"
  input: "^training/Adam/m_2_1/Assign"
  input: "^training/Adam/m_3_1/Assign"
  input: "^training/Adam/m_4_1/Assign"
  input: "^training/Adam/m_5_1/Assign"
  input: "^training/Adam/m_6_1/Assign"
  input: "^training/Adam/m_7_1/Assign"
  input: "^training/Adam/m_8_1/Assign"
  input: "^training/Adam/m_9_1/Assign"
  input: "^training/Adam/v_0_1/Assign"
  input: "^training/Adam/v_10_1/Assign"
  input: "^training/Adam/v_11_1/Assign"
  input: "^training/Adam/v_12_1/Assign"
  input: "^training/Adam/v_13_1/Assign"
  input: "^training/Adam/v_14_1/Assign"
  input: "^training/Adam/v_15_1/Assign"
  input: "^training/Adam/v_16_1/Assign"
  input: "^training/Adam/v_17_1/Assign"
  input: "^training/Adam/v_18_1/Assign"
  input: "^training/Adam/v_19_1/Assign"
  input: "^training/Adam/v_1_1/Assign"
  input: "^training/Adam/v_20_1/Assign"
  input: "^training/Adam/v_21_1/Assign"
  input: "^training/Adam/v_2_1/Assign"
  input: "^training/Adam/v_3_1/Assign"
  input: "^training/Adam/v_4_1/Assign"
  input: "^training/Adam/v_5_1/Assign"
  input: "^training/Adam/v_6_1/Assign"
  input: "^training/Adam/v_7_1/Assign"
  input: "^training/Adam/v_8_1/Assign"
  input: "^training/Adam/v_9_1/Assign"
  input: "^training/Adam/vhat_0_1/Assign"
  input: "^training/Adam/vhat_10_1/Assign"
  input: "^training/Adam/vhat_11_1/Assign"
  input: "^training/Adam/vhat_12_1/Assign"
  input: "^training/Adam/vhat_13_1/Assign"
  input: "^training/Adam/vhat_14_1/Assign"
  input: "^training/Adam/vhat_15_1/Assign"
  input: "^training/Adam/vhat_16_1/Assign"
  input: "^training/Adam/vhat_17_1/Assign"
  input: "^training/Adam/vhat_18_1/Assign"
  input: "^training/Adam/vhat_19_1/Assign"
  input: "^training/Adam/vhat_1_1/Assign"
  input: "^training/Adam/vhat_20_1/Assign"
  input: "^training/Adam/vhat_21_1/Assign"
  input: "^training/Adam/vhat_2_1/Assign"
  input: "^training/Adam/vhat_3_1/Assign"
  input: "^training/Adam/vhat_4_1/Assign"
  input: "^training/Adam/vhat_5_1/Assign"
  input: "^training/Adam/vhat_6_1/Assign"
  input: "^training/Adam/vhat_7_1/Assign"
  input: "^training/Adam/vhat_8_1/Assign"
  input: "^training/Adam/vhat_9_1/Assign"
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^Mean"
  input: "^batch_normalization_1/AssignSubVariableOp"
  input: "^batch_normalization_1/AssignSubVariableOp_1"
  input: "^batch_normalization_2/AssignSubVariableOp"
  input: "^batch_normalization_2/AssignSubVariableOp_1"
  input: "^batch_normalization_3/AssignSubVariableOp"
  input: "^batch_normalization_3/AssignSubVariableOp_1"
  input: "^loss/AssignAddVariableOp"
  input: "^loss/AssignAddVariableOp_1"
  input: "^loss/AssignAddVariableOp_2"
  input: "^loss/AssignAddVariableOp_3"
  input: "^loss/AssignAddVariableOp_4"
  input: "^loss/AssignAddVariableOp_5"
  input: "^metrics/bin_out_angle_bin_rmse/AssignAddVariableOp"
  input: "^metrics/bin_out_angle_bin_rmse/AssignAddVariableOp_1"
  input: "^metrics/cat_out_accuracy/AssignAddVariableOp"
  input: "^metrics/cat_out_accuracy/AssignAddVariableOp_1"
  input: "^metrics/reg_out_angle_mae/AssignAddVariableOp"
  input: "^metrics/reg_out_angle_mae/AssignAddVariableOp_1"
  input: "^training/Adam/AssignAddVariableOp"
  input: "^training/Adam/AssignVariableOp"
  input: "^training/Adam/AssignVariableOp_1"
  input: "^training/Adam/AssignVariableOp_10"
  input: "^training/Adam/AssignVariableOp_11"
  input: "^training/Adam/AssignVariableOp_12"
  input: "^training/Adam/AssignVariableOp_13"
  input: "^training/Adam/AssignVariableOp_14"
  input: "^training/Adam/AssignVariableOp_15"
  input: "^training/Adam/AssignVariableOp_16"
  input: "^training/Adam/AssignVariableOp_17"
  input: "^training/Adam/AssignVariableOp_18"
  input: "^training/Adam/AssignVariableOp_19"
  input: "^training/Adam/AssignVariableOp_2"
  input: "^training/Adam/AssignVariableOp_20"
  input: "^training/Adam/AssignVariableOp_21"
  input: "^training/Adam/AssignVariableOp_22"
  input: "^training/Adam/AssignVariableOp_23"
  input: "^training/Adam/AssignVariableOp_24"
  input: "^training/Adam/AssignVariableOp_25"
  input: "^training/Adam/AssignVariableOp_26"
  input: "^training/Adam/AssignVariableOp_27"
  input: "^training/Adam/AssignVariableOp_28"
  input: "^training/Adam/AssignVariableOp_29"
  input: "^training/Adam/AssignVariableOp_3"
  input: "^training/Adam/AssignVariableOp_30"
  input: "^training/Adam/AssignVariableOp_31"
  input: "^training/Adam/AssignVariableOp_32"
  input: "^training/Adam/AssignVariableOp_33"
  input: "^training/Adam/AssignVariableOp_34"
  input: "^training/Adam/AssignVariableOp_35"
  input: "^training/Adam/AssignVariableOp_36"
  input: "^training/Adam/AssignVariableOp_37"
  input: "^training/Adam/AssignVariableOp_38"
  input: "^training/Adam/AssignVariableOp_39"
  input: "^training/Adam/AssignVariableOp_4"
  input: "^training/Adam/AssignVariableOp_40"
  input: "^training/Adam/AssignVariableOp_41"
  input: "^training/Adam/AssignVariableOp_42"
  input: "^training/Adam/AssignVariableOp_43"
  input: "^training/Adam/AssignVariableOp_44"
  input: "^training/Adam/AssignVariableOp_45"
  input: "^training/Adam/AssignVariableOp_46"
  input: "^training/Adam/AssignVariableOp_47"
  input: "^training/Adam/AssignVariableOp_48"
  input: "^training/Adam/AssignVariableOp_49"
  input: "^training/Adam/AssignVariableOp_5"
  input: "^training/Adam/AssignVariableOp_50"
  input: "^training/Adam/AssignVariableOp_51"
  input: "^training/Adam/AssignVariableOp_52"
  input: "^training/Adam/AssignVariableOp_53"
  input: "^training/Adam/AssignVariableOp_54"
  input: "^training/Adam/AssignVariableOp_55"
  input: "^training/Adam/AssignVariableOp_56"
  input: "^training/Adam/AssignVariableOp_57"
  input: "^training/Adam/AssignVariableOp_58"
  input: "^training/Adam/AssignVariableOp_59"
  input: "^training/Adam/AssignVariableOp_6"
  input: "^training/Adam/AssignVariableOp_60"
  input: "^training/Adam/AssignVariableOp_61"
  input: "^training/Adam/AssignVariableOp_62"
  input: "^training/Adam/AssignVariableOp_63"
  input: "^training/Adam/AssignVariableOp_64"
  input: "^training/Adam/AssignVariableOp_65"
  input: "^training/Adam/AssignVariableOp_7"
  input: "^training/Adam/AssignVariableOp_8"
  input: "^training/Adam/AssignVariableOp_9"
}
node {
  name: "Placeholder_28"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "Adam/iterations"
  input: "Placeholder_28"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ReadVariableOp_28"
  op: "ReadVariableOp"
  input: "Adam/iterations"
  input: "^AssignVariableOp_28"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Placeholder_29"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "training/Adam/m_0_1"
  input: "Placeholder_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_29"
  op: "ReadVariableOp"
  input: "training/Adam/m_0_1"
  input: "^AssignVariableOp_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_30"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "training/Adam/m_1_1"
  input: "Placeholder_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_30"
  op: "ReadVariableOp"
  input: "training/Adam/m_1_1"
  input: "^AssignVariableOp_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_31"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "training/Adam/m_2_1"
  input: "Placeholder_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_31"
  op: "ReadVariableOp"
  input: "training/Adam/m_2_1"
  input: "^AssignVariableOp_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_32"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "training/Adam/m_3_1"
  input: "Placeholder_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_32"
  op: "ReadVariableOp"
  input: "training/Adam/m_3_1"
  input: "^AssignVariableOp_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_33"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "training/Adam/m_4_1"
  input: "Placeholder_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_33"
  op: "ReadVariableOp"
  input: "training/Adam/m_4_1"
  input: "^AssignVariableOp_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_34"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "training/Adam/m_5_1"
  input: "Placeholder_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_34"
  op: "ReadVariableOp"
  input: "training/Adam/m_5_1"
  input: "^AssignVariableOp_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_35"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "training/Adam/m_6_1"
  input: "Placeholder_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_35"
  op: "ReadVariableOp"
  input: "training/Adam/m_6_1"
  input: "^AssignVariableOp_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_36"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "training/Adam/m_7_1"
  input: "Placeholder_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_36"
  op: "ReadVariableOp"
  input: "training/Adam/m_7_1"
  input: "^AssignVariableOp_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_37"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "training/Adam/m_8_1"
  input: "Placeholder_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_37"
  op: "ReadVariableOp"
  input: "training/Adam/m_8_1"
  input: "^AssignVariableOp_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_38"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "training/Adam/m_9_1"
  input: "Placeholder_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_38"
  op: "ReadVariableOp"
  input: "training/Adam/m_9_1"
  input: "^AssignVariableOp_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_39"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "training/Adam/m_10_1"
  input: "Placeholder_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_39"
  op: "ReadVariableOp"
  input: "training/Adam/m_10_1"
  input: "^AssignVariableOp_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_40"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "training/Adam/m_11_1"
  input: "Placeholder_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_40"
  op: "ReadVariableOp"
  input: "training/Adam/m_11_1"
  input: "^AssignVariableOp_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_41"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "training/Adam/m_12_1"
  input: "Placeholder_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_41"
  op: "ReadVariableOp"
  input: "training/Adam/m_12_1"
  input: "^AssignVariableOp_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_42"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "training/Adam/m_13_1"
  input: "Placeholder_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_42"
  op: "ReadVariableOp"
  input: "training/Adam/m_13_1"
  input: "^AssignVariableOp_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_43"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_43"
  op: "AssignVariableOp"
  input: "training/Adam/m_14_1"
  input: "Placeholder_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_43"
  op: "ReadVariableOp"
  input: "training/Adam/m_14_1"
  input: "^AssignVariableOp_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_44"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_44"
  op: "AssignVariableOp"
  input: "training/Adam/m_15_1"
  input: "Placeholder_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_44"
  op: "ReadVariableOp"
  input: "training/Adam/m_15_1"
  input: "^AssignVariableOp_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_45"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_45"
  op: "AssignVariableOp"
  input: "training/Adam/m_16_1"
  input: "Placeholder_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_45"
  op: "ReadVariableOp"
  input: "training/Adam/m_16_1"
  input: "^AssignVariableOp_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_46"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_46"
  op: "AssignVariableOp"
  input: "training/Adam/m_17_1"
  input: "Placeholder_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_46"
  op: "ReadVariableOp"
  input: "training/Adam/m_17_1"
  input: "^AssignVariableOp_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_47"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_47"
  op: "AssignVariableOp"
  input: "training/Adam/m_18_1"
  input: "Placeholder_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_47"
  op: "ReadVariableOp"
  input: "training/Adam/m_18_1"
  input: "^AssignVariableOp_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_48"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_48"
  op: "AssignVariableOp"
  input: "training/Adam/m_19_1"
  input: "Placeholder_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_48"
  op: "ReadVariableOp"
  input: "training/Adam/m_19_1"
  input: "^AssignVariableOp_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_49"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_49"
  op: "AssignVariableOp"
  input: "training/Adam/m_20_1"
  input: "Placeholder_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_49"
  op: "ReadVariableOp"
  input: "training/Adam/m_20_1"
  input: "^AssignVariableOp_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_50"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_50"
  op: "AssignVariableOp"
  input: "training/Adam/m_21_1"
  input: "Placeholder_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_50"
  op: "ReadVariableOp"
  input: "training/Adam/m_21_1"
  input: "^AssignVariableOp_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_51"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_51"
  op: "AssignVariableOp"
  input: "training/Adam/v_0_1"
  input: "Placeholder_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_51"
  op: "ReadVariableOp"
  input: "training/Adam/v_0_1"
  input: "^AssignVariableOp_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_52"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_52"
  op: "AssignVariableOp"
  input: "training/Adam/v_1_1"
  input: "Placeholder_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_52"
  op: "ReadVariableOp"
  input: "training/Adam/v_1_1"
  input: "^AssignVariableOp_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_53"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_53"
  op: "AssignVariableOp"
  input: "training/Adam/v_2_1"
  input: "Placeholder_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_53"
  op: "ReadVariableOp"
  input: "training/Adam/v_2_1"
  input: "^AssignVariableOp_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_54"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_54"
  op: "AssignVariableOp"
  input: "training/Adam/v_3_1"
  input: "Placeholder_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_54"
  op: "ReadVariableOp"
  input: "training/Adam/v_3_1"
  input: "^AssignVariableOp_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_55"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_55"
  op: "AssignVariableOp"
  input: "training/Adam/v_4_1"
  input: "Placeholder_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_55"
  op: "ReadVariableOp"
  input: "training/Adam/v_4_1"
  input: "^AssignVariableOp_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_56"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_56"
  op: "AssignVariableOp"
  input: "training/Adam/v_5_1"
  input: "Placeholder_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_56"
  op: "ReadVariableOp"
  input: "training/Adam/v_5_1"
  input: "^AssignVariableOp_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_57"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_57"
  op: "AssignVariableOp"
  input: "training/Adam/v_6_1"
  input: "Placeholder_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_57"
  op: "ReadVariableOp"
  input: "training/Adam/v_6_1"
  input: "^AssignVariableOp_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_58"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_58"
  op: "AssignVariableOp"
  input: "training/Adam/v_7_1"
  input: "Placeholder_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_58"
  op: "ReadVariableOp"
  input: "training/Adam/v_7_1"
  input: "^AssignVariableOp_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_59"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_59"
  op: "AssignVariableOp"
  input: "training/Adam/v_8_1"
  input: "Placeholder_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_59"
  op: "ReadVariableOp"
  input: "training/Adam/v_8_1"
  input: "^AssignVariableOp_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_60"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_60"
  op: "AssignVariableOp"
  input: "training/Adam/v_9_1"
  input: "Placeholder_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_60"
  op: "ReadVariableOp"
  input: "training/Adam/v_9_1"
  input: "^AssignVariableOp_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_61"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_61"
  op: "AssignVariableOp"
  input: "training/Adam/v_10_1"
  input: "Placeholder_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_61"
  op: "ReadVariableOp"
  input: "training/Adam/v_10_1"
  input: "^AssignVariableOp_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_62"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_62"
  op: "AssignVariableOp"
  input: "training/Adam/v_11_1"
  input: "Placeholder_62"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_62"
  op: "ReadVariableOp"
  input: "training/Adam/v_11_1"
  input: "^AssignVariableOp_62"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_63"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_63"
  op: "AssignVariableOp"
  input: "training/Adam/v_12_1"
  input: "Placeholder_63"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_63"
  op: "ReadVariableOp"
  input: "training/Adam/v_12_1"
  input: "^AssignVariableOp_63"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_64"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_64"
  op: "AssignVariableOp"
  input: "training/Adam/v_13_1"
  input: "Placeholder_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_64"
  op: "ReadVariableOp"
  input: "training/Adam/v_13_1"
  input: "^AssignVariableOp_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_65"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_65"
  op: "AssignVariableOp"
  input: "training/Adam/v_14_1"
  input: "Placeholder_65"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_65"
  op: "ReadVariableOp"
  input: "training/Adam/v_14_1"
  input: "^AssignVariableOp_65"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_66"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_66"
  op: "AssignVariableOp"
  input: "training/Adam/v_15_1"
  input: "Placeholder_66"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_66"
  op: "ReadVariableOp"
  input: "training/Adam/v_15_1"
  input: "^AssignVariableOp_66"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_67"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_67"
  op: "AssignVariableOp"
  input: "training/Adam/v_16_1"
  input: "Placeholder_67"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_67"
  op: "ReadVariableOp"
  input: "training/Adam/v_16_1"
  input: "^AssignVariableOp_67"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_68"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_68"
  op: "AssignVariableOp"
  input: "training/Adam/v_17_1"
  input: "Placeholder_68"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_68"
  op: "ReadVariableOp"
  input: "training/Adam/v_17_1"
  input: "^AssignVariableOp_68"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_69"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_69"
  op: "AssignVariableOp"
  input: "training/Adam/v_18_1"
  input: "Placeholder_69"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_69"
  op: "ReadVariableOp"
  input: "training/Adam/v_18_1"
  input: "^AssignVariableOp_69"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_70"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_70"
  op: "AssignVariableOp"
  input: "training/Adam/v_19_1"
  input: "Placeholder_70"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_70"
  op: "ReadVariableOp"
  input: "training/Adam/v_19_1"
  input: "^AssignVariableOp_70"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_71"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_71"
  op: "AssignVariableOp"
  input: "training/Adam/v_20_1"
  input: "Placeholder_71"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_71"
  op: "ReadVariableOp"
  input: "training/Adam/v_20_1"
  input: "^AssignVariableOp_71"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_72"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_72"
  op: "AssignVariableOp"
  input: "training/Adam/v_21_1"
  input: "Placeholder_72"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_72"
  op: "ReadVariableOp"
  input: "training/Adam/v_21_1"
  input: "^AssignVariableOp_72"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_73"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_73"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_0_1"
  input: "Placeholder_73"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_73"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_0_1"
  input: "^AssignVariableOp_73"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_74"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_74"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_1_1"
  input: "Placeholder_74"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_74"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_1_1"
  input: "^AssignVariableOp_74"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_75"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_75"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_2_1"
  input: "Placeholder_75"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_75"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_2_1"
  input: "^AssignVariableOp_75"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_76"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_76"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_3_1"
  input: "Placeholder_76"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_76"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_3_1"
  input: "^AssignVariableOp_76"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_77"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_77"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_4_1"
  input: "Placeholder_77"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_77"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_4_1"
  input: "^AssignVariableOp_77"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_78"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_78"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_5_1"
  input: "Placeholder_78"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_78"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_5_1"
  input: "^AssignVariableOp_78"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_79"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_79"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_6_1"
  input: "Placeholder_79"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_79"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_6_1"
  input: "^AssignVariableOp_79"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_80"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_80"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_7_1"
  input: "Placeholder_80"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_80"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_7_1"
  input: "^AssignVariableOp_80"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_81"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_81"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_8_1"
  input: "Placeholder_81"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_81"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_8_1"
  input: "^AssignVariableOp_81"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_82"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_82"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_9_1"
  input: "Placeholder_82"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_82"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_9_1"
  input: "^AssignVariableOp_82"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_83"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_83"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_10_1"
  input: "Placeholder_83"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_83"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_10_1"
  input: "^AssignVariableOp_83"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_84"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_84"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_11_1"
  input: "Placeholder_84"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_84"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_11_1"
  input: "^AssignVariableOp_84"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_85"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_85"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_12_1"
  input: "Placeholder_85"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_85"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_12_1"
  input: "^AssignVariableOp_85"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_86"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_86"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_13_1"
  input: "Placeholder_86"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_86"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_13_1"
  input: "^AssignVariableOp_86"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_87"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_87"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_14_1"
  input: "Placeholder_87"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_87"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_14_1"
  input: "^AssignVariableOp_87"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_88"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_88"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_15_1"
  input: "Placeholder_88"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_88"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_15_1"
  input: "^AssignVariableOp_88"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_89"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_89"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_16_1"
  input: "Placeholder_89"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_89"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_16_1"
  input: "^AssignVariableOp_89"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_90"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_90"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_17_1"
  input: "Placeholder_90"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_90"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_17_1"
  input: "^AssignVariableOp_90"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_91"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_91"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_18_1"
  input: "Placeholder_91"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_91"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_18_1"
  input: "^AssignVariableOp_91"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_92"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_92"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_19_1"
  input: "Placeholder_92"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_92"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_19_1"
  input: "^AssignVariableOp_92"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_93"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_93"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_20_1"
  input: "Placeholder_93"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_93"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_20_1"
  input: "^AssignVariableOp_93"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder_94"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp_94"
  op: "AssignVariableOp"
  input: "training/Adam/vhat_21_1"
  input: "Placeholder_94"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadVariableOp_94"
  op: "ReadVariableOp"
  input: "training/Adam/vhat_21_1"
  input: "^AssignVariableOp_94"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "k2tfout_0"
  op: "Identity"
  input: "cat_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "k2tfout_1"
  op: "Identity"
  input: "reg_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "k2tfout_2"
  op: "Identity"
  input: "bin_out/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 134
}
